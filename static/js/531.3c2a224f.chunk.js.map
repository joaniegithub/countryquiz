{"version":3,"file":"static/js/531.3c2a224f.chunk.js","mappings":"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","sources":["components/menu/gameCarousel/EmblaCarouselArrowButtons.js","components/menu/NewGameCategories.js","components/menu/NewGameOptions.js","components/menu/NewGame.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\nimport { IconButton } from '@mui/material';\n\nexport const usePrevNextButtons = (emblaApi) => {\n    const [prevBtnDisabled, setPrevBtnDisabled] = useState(true);\n    const [nextBtnDisabled, setNextBtnDisabled] = useState(true);\n\n    const onPrevButtonClick = useCallback(() => {\n        if (!emblaApi) return;\n        emblaApi.scrollPrev();\n    }, [emblaApi]);\n\n    const onNextButtonClick = useCallback(() => {\n        if (!emblaApi) return;\n        emblaApi.scrollNext();\n    }, [emblaApi]);\n\n    const onSelect = useCallback((emblaApi) => {\n        setPrevBtnDisabled(!emblaApi.canScrollPrev());\n        setNextBtnDisabled(!emblaApi.canScrollNext());\n    }, []);\n\n    useEffect(() => {\n        if (!emblaApi) return;\n\n        onSelect(emblaApi);\n        emblaApi.on('reInit', onSelect).on('select', onSelect);\n    }, [emblaApi, onSelect]);\n\n    return {\n        prevBtnDisabled,\n        nextBtnDisabled,\n        onPrevButtonClick,\n        onNextButtonClick,\n    };\n};\n\nexport const PrevButton = (props) => {\n    const { children, ...restProps } = props;\n\n    return (\n        <IconButton {...restProps} className=\"standalone\">\n            <ArrowBackIosNewIcon />\n            {children}\n        </IconButton>\n    );\n};\n\nexport const NextButton = (props) => {\n    const { children, ...restProps } = props;\n\n    return (\n        <IconButton {...restProps} className=\"standalone\">\n            <ArrowForwardIosIcon />\n            {children}\n        </IconButton>\n    );\n};\n","import { useTheme } from '@emotion/react';\r\nimport useEmblaCarousel from 'embla-carousel-react';\r\nimport * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport CloudOffIcon from '@mui/icons-material/CloudOff';\r\nimport { Box, Button, Grow, Typography, alpha } from '@mui/material';\r\n\r\nimport { NextButton, PrevButton, usePrevNextButtons } from 'components/menu/gameCarousel/EmblaCarouselArrowButtons';\r\nimport FunTypo from 'components/ui/FunTypo';\r\nimport { useGameConfig, useLanguage, useLastGameCategory } from 'store/selector';\r\nimport { getGameSVG, pxToRem } from 'util/util';\r\n\r\nconst NewGameCategories = (props) => {\r\n    const { handleClickGameCategory } = props;\r\n    const theme = useTheme();\r\n    const { t, i18n } = useTranslation();\r\n    const lastGameCategoryKey = useLastGameCategory();\r\n    const gameConfig = useGameConfig();\r\n    const language = useLanguage();\r\n\r\n    const OPTIONS = { dragFree: true, containScroll: false };\r\n    const [emblaRef, emblaApi] = useEmblaCarousel(OPTIONS);\r\n\r\n    useEffect(() => {\r\n        if (!emblaApi || !gameConfig.gameCategories || !lastGameCategoryKey) return;\r\n        const gameIndex = gameConfig.gameCategories.findIndex((m) => m.key === lastGameCategoryKey);\r\n        emblaApi.scrollTo(gameIndex, true);\r\n    }, [lastGameCategoryKey, emblaApi]);\r\n    const { prevBtnDisabled, nextBtnDisabled, onPrevButtonClick, onNextButtonClick } = usePrevNextButtons(emblaApi);\r\n\r\n    return (\r\n        <>\r\n            <Typography\r\n                variant=\"h2\"\r\n                display=\"block\"\r\n                width=\"100%\"\r\n                fontSize={pxToRem(32)}\r\n                fontWeight=\"800\"\r\n                textAlign=\"center\"\r\n                mb={pxToRem(20)}\r\n            >\r\n                <FunTypo\r\n                    text={t('Game modes')}\r\n                    color={theme.palette.text.main.replace('#', '')}\r\n                    stroke={false}\r\n                    strokeWidth={pxToRem(2)}\r\n                    distance={pxToRem(3)}\r\n                    sx={{\r\n                        fontSize: pxToRem(40),\r\n                        lineHeight: pxToRem(30),\r\n                        fontWeight: 800,\r\n                    }}\r\n                />\r\n                {t('Game modes2') && (\r\n                    <>\r\n                        <br />\r\n                        <FunTypo\r\n                            text={t('Game modes2')}\r\n                            color={theme.palette.text.main.replace('#', '')}\r\n                            stroke={false}\r\n                            strokeWidth={pxToRem(2)}\r\n                            distance={pxToRem(3)}\r\n                            sx={{\r\n                                fontSize: pxToRem(40),\r\n                                lineHeight: pxToRem(30),\r\n                                fontWeight: 800,\r\n                            }}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Typography>\r\n            <Box\r\n                ref={emblaRef}\r\n                sx={{\r\n                    maxWidth: '100%',\r\n                    padding: '32px',\r\n                    my: '-32px',\r\n                    '@media (min-width: 641px)': {\r\n                        maskImage: 'linear-gradient(90deg, transparent 0%, black 5%, black 95%, transparent 100%)',\r\n                    },\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        touchAction: 'pan-y pinch-zoom',\r\n                        marginLeft: 'calc(1rem * -1)',\r\n                    }}\r\n                >\r\n                    {gameConfig.gameCategories.map((gameCat, index) => {\r\n                        // todo: sort offline last\r\n                        const isDisabled = gameCat.disabledOffline && !navigator.onLine;\r\n                        const shadowAlpha = isDisabled ? 0.05 : 0.15;\r\n                        return (\r\n                            <Box\r\n                                key={gameCat.key}\r\n                                sx={{\r\n                                    transform: 'translate3d(0, 0, 0)',\r\n                                    flex: `0 0 ${pxToRem(220)}`,\r\n                                    minWidth: 0,\r\n                                    pl: '1rem',\r\n                                    overflowY: 'visible',\r\n                                    position: 'relative',\r\n                                }}\r\n                            >\r\n                                <Grow in={true} timeout={index * 100 + 200} key={gameCat.key}>\r\n                                    <Button\r\n                                        variant=\"mode\"\r\n                                        size=\"large\"\r\n                                        disabled={isDisabled}\r\n                                        sx={{\r\n                                            width: '100%',\r\n                                            display: 'flex',\r\n                                            flexDirection: 'column',\r\n                                            alignItems: 'center',\r\n                                            position: 'relative',\r\n                                            overflow: 'hidden',\r\n                                            px: 0,\r\n                                            pt: pxToRem(40),\r\n                                            pb: pxToRem(48),\r\n                                            // '&:hover': {\r\n                                            //     backgroundColor: theme.palette.background.tileHover,\r\n                                            // },\r\n                                            'svg:first-of-type': {\r\n                                                color: isDisabled\r\n                                                    ? theme.palette.neutral[300]\r\n                                                    : theme.palette.secondary.contrast,\r\n                                                height: pxToRem(96),\r\n                                                width: pxToRem(96),\r\n                                                fill: 'currentColor',\r\n                                                filter: `drop-shadow(4px 4px 0px ${alpha(theme.palette.shadow, shadowAlpha)})`,\r\n                                            },\r\n                                        }}\r\n                                        onClick={(e) => handleClickGameCategory(gameCat.key)}\r\n                                    >\r\n                                        {getGameSVG(gameCat.key)}\r\n                                        <FunTypo\r\n                                            text={gameCat.name[i18n.language]}\r\n                                            color={(isDisabled\r\n                                                ? theme.palette.neutral[300]\r\n                                                : theme.palette.secondary.contrast\r\n                                            ).replace('#', '')}\r\n                                            stroke={false}\r\n                                            strokeWidth={pxToRem(2)}\r\n                                            distance={pxToRem(2)}\r\n                                            sx={{\r\n                                                fontSize: pxToRem(28),\r\n                                                lineHeight: pxToRem(30),\r\n                                                fontWeight: 800,\r\n                                                mt: pxToRem(20),\r\n                                                px: pxToRem(8),\r\n                                            }}\r\n                                        />\r\n                                        {isDisabled && (\r\n                                            <CloudOffIcon\r\n                                                width={pxToRem(16)}\r\n                                                height={pxToRem(16)}\r\n                                                color={theme.palette.neutral[300]}\r\n                                                sx={{\r\n                                                    position: 'absolute',\r\n                                                    bottom: pxToRem(8),\r\n                                                }}\r\n                                            />\r\n                                        )}\r\n                                        {language === 'fra' && (gameCat.notTranslated || gameCat.semiTranslated) && (\r\n                                            <Typography\r\n                                                display=\"flex\"\r\n                                                flexDirection=\"column\"\r\n                                                justifyContent=\"center\"\r\n                                                alignItems=\"center\"\r\n                                                backgroundColor={theme.palette.neutral[100]}\r\n                                                color={theme.palette.neutral[400]}\r\n                                                sx={{\r\n                                                    fontSize: pxToRem(12),\r\n                                                    position: 'absolute',\r\n                                                    top: pxToRem(8),\r\n                                                    left: pxToRem(-38),\r\n                                                    height: pxToRem(36),\r\n                                                    width: pxToRem(136),\r\n                                                    transform: 'rotate(-40deg)',\r\n                                                    span: {\r\n                                                        display: 'block',\r\n                                                        lineHeight: pxToRem(14),\r\n                                                    },\r\n                                                }}\r\n                                            >\r\n                                                <span>{t('eng')}</span>\r\n                                                {gameCat.semiTranslated ? <span>/ {t('fra')}</span> : null}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </Button>\r\n                                </Grow>\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Box>\r\n            </Box>\r\n            <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\" width=\"100%\">\r\n                <PrevButton onClick={onPrevButtonClick} disabled={prevBtnDisabled} />\r\n                <NextButton onClick={onNextButtonClick} disabled={nextBtnDisabled} />\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewGameCategories;\r\n","import { useTheme } from '@emotion/react';\r\nimport { DIFFICULTY_FLASHCARD, DIFFICULTY_NORMAL, FULL, SHORT } from 'config/baseConfig';\r\nimport * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport {\r\n    Button,\r\n    Card,\r\n    Grow,\r\n    InputLabel,\r\n    Stack,\r\n    Switch,\r\n    TextField,\r\n    ToggleButton,\r\n    ToggleButtonGroup,\r\n    Typography,\r\n    alpha,\r\n} from '@mui/material';\r\n\r\nimport MainButton from 'components/ui/MainButton';\r\nimport OptionRow from 'components/ui/OptionRow';\r\nimport { getRegions } from 'data/data';\r\nimport { chooseGameMode, startGame } from 'store/actions';\r\nimport {\r\n    useGameConfig,\r\n    useGameOptions,\r\n    useLastGameCategory,\r\n    useLastGameMode,\r\n    useShowAdvancedOptions,\r\n} from 'store/selector';\r\nimport { Spacer, getGameSVG, pxToRem } from 'util/util';\r\n\r\nconst NewGameOptions = (props) => {\r\n    const { handleClickChangeGameCategory, gameCategoryKey } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const theme = useTheme();\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const gameConfig = useGameConfig();\r\n    const gameOptions = useGameOptions();\r\n    const lastGameCategoryKey = useLastGameCategory();\r\n    const lastGameModeKey = useLastGameMode();\r\n    const showAdvancedOptions = useShowAdvancedOptions();\r\n    const gameCategory = gameConfig.gameCategories.find((g) => g.key === gameCategoryKey);\r\n\r\n    const [gameMode, setGameMode] = useState(\r\n        lastGameModeKey ||\r\n            (gameCategory.modes.find((mode) => mode.key === lastGameCategoryKey) || gameCategory.modes[0]).key\r\n    );\r\n    const [gameLength, setGameLength] = useState((gameOptions && gameOptions.gameLength) || SHORT);\r\n    const [independantOnly, setIndependantOnly] = useState(\r\n        gameCategory.canChooseIndependant ? (gameOptions ? gameOptions.independantOnly : true) : false\r\n    );\r\n    const [region, setRegion] = useState(gameCategory.canChooseRegion ? gameOptions?.region || 'all' : 'all');\r\n    const [difficultyLevel, setDifficultyLevel] = useState(\r\n        (gameOptions &&\r\n            (gameOptions.difficultyLevel === DIFFICULTY_FLASHCARD && !gameCategory.hasFlashCardDifficulty\r\n                ? DIFFICULTY_NORMAL\r\n                : gameOptions.difficultyLevel)) ??\r\n            DIFFICULTY_NORMAL\r\n    );\r\n    const [hideBackgroundMap, setHideBackgroundMap] = useState((gameOptions && gameOptions.hideBackgroundMap) ?? false);\r\n\r\n    const regions = getRegions();\r\n\r\n    const handleChangeMode = (event) => {\r\n        setGameMode(event.target.value);\r\n        dispatch(chooseGameMode(event.target.value));\r\n    };\r\n\r\n    const handleChangeLength = (event) => {\r\n        setGameLength(event.target.value);\r\n    };\r\n\r\n    const handleChangeIndependant = (event) => {\r\n        setIndependantOnly(event.target.checked);\r\n    };\r\n\r\n    const handleChangeRegion = (event) => {\r\n        setRegion(event.target.value);\r\n    };\r\n\r\n    const handleChangeDifficultyLevel = (event) => {\r\n        setDifficultyLevel(event.target.value);\r\n    };\r\n\r\n    const handleClickHideBackgroundMap = (event) => {\r\n        setHideBackgroundMap(event.target.checked);\r\n    };\r\n\r\n    const handleClickStart = () => {\r\n        dispatch(startGame(gameMode, region, difficultyLevel, independantOnly, gameLength, hideBackgroundMap));\r\n    };\r\n\r\n    const optionFlashcard = gameConfig.difficultyLevels.find((option) => option.key === DIFFICULTY_FLASHCARD);\r\n\r\n    return (\r\n        <Grow in={true}>\r\n            <Card\r\n                aria-label={t('Options')}\r\n                sx={{\r\n                    textAlign: 'center',\r\n                    minWidth: pxToRem(240),\r\n                    position: 'relative',\r\n                }}\r\n            >\r\n                <Stack spacing={1.5}>\r\n                    <Button\r\n                        variant=\"mode\"\r\n                        size=\"medium\"\r\n                        py={pxToRem(12)}\r\n                        sx={{\r\n                            svg: {\r\n                                color: theme.palette.secondary.contrast,\r\n                                height: pxToRem(36),\r\n                                width: pxToRem(36),\r\n                                fill: 'currentColor',\r\n                                mr: pxToRem(12),\r\n                                filter: `drop-shadow(2px 2px 0px ${alpha(theme.palette.shadow, 0.15)})`,\r\n                            },\r\n                            mb: pxToRem(6),\r\n                        }}\r\n                        onClick={handleClickChangeGameCategory}\r\n                    >\r\n                        {getGameSVG(gameCategoryKey)}\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            display=\"block\"\r\n                            color=\"secondary.contrast\"\r\n                            fontSize={pxToRem(24)}\r\n                            lineHeight={pxToRem(40)}\r\n                            mr={pxToRem(12)}\r\n                            sx={{\r\n                                textShadow: `2px 2px 0px ${alpha(theme.palette.shadow, 0.1)}`,\r\n                            }}\r\n                        >\r\n                            {gameCategory.name[i18n.language]}\r\n                        </Typography>\r\n                    </Button>\r\n                    <Spacer height={1} />\r\n                    {gameCategory.modes.length > 1 && (\r\n                        <OptionRow>\r\n                            <InputLabel htmlFor=\"Mode\">{t('Variant')}:</InputLabel>\r\n                            <ToggleButtonGroup\r\n                                id=\"Mode\"\r\n                                name=\"Mode\"\r\n                                color=\"secondary\"\r\n                                value={gameMode}\r\n                                exclusive\r\n                                onChange={handleChangeMode}\r\n                                size=\"small\"\r\n                                sx={{\r\n                                    justifyContent: 'flex-end',\r\n                                }}\r\n                            >\r\n                                {gameCategory.modes.map((m) => (\r\n                                    <ToggleButton key={m.key} value={m.key}>\r\n                                        {m?.name[i18n.language]}\r\n                                    </ToggleButton>\r\n                                ))}\r\n                            </ToggleButtonGroup>\r\n                        </OptionRow>\r\n                    )}\r\n                    {gameCategory.canChooseRegion && (\r\n                        <OptionRow>\r\n                            <InputLabel htmlFor=\"Region\">{t('Region')}:</InputLabel>\r\n                            <TextField\r\n                                id=\"Region\"\r\n                                name=\"Region\"\r\n                                onChange={handleChangeRegion}\r\n                                required\r\n                                select\r\n                                size=\"small\"\r\n                                SelectProps={{ native: true }}\r\n                                value={region}\r\n                                sx={{\r\n                                    mt: 0,\r\n                                }}\r\n                            >\r\n                                <option key=\"all\" value=\"all\">\r\n                                    {t('World')}\r\n                                </option>\r\n                                {Object.values(regions)\r\n                                    .filter((r) => !!r.subregions)\r\n                                    .map((option) =>\r\n                                        option.code === 'AN' ? null : (\r\n                                            <option key={option.code} value={option.code}>\r\n                                                {option[i18n.language]}\r\n                                            </option>\r\n                                        )\r\n                                    )}\r\n                            </TextField>\r\n                        </OptionRow>\r\n                    )}\r\n                    <OptionRow>\r\n                        <InputLabel htmlFor=\"Length\">{t('Length')}:</InputLabel>\r\n                        <ToggleButtonGroup\r\n                            id=\"Length\"\r\n                            name=\"Length\"\r\n                            color=\"secondary\"\r\n                            value={gameLength}\r\n                            exclusive\r\n                            onChange={handleChangeLength}\r\n                            size=\"small\"\r\n                            sx={{\r\n                                justifyContent: 'flex-end',\r\n                            }}\r\n                        >\r\n                            <ToggleButton value={SHORT} size=\"small\">\r\n                                {t('Short')}\r\n                            </ToggleButton>\r\n                            <ToggleButton value={FULL} size=\"small\">\r\n                                {t('Long')}\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </OptionRow>\r\n                    <OptionRow>\r\n                        <InputLabel htmlFor=\"Difficulty\">{t('Difficulty')}:</InputLabel>\r\n                        <ToggleButtonGroup\r\n                            id=\"Difficulty\"\r\n                            name=\"Difficulty\"\r\n                            color=\"secondary\"\r\n                            value={difficultyLevel}\r\n                            exclusive\r\n                            onChange={handleChangeDifficultyLevel}\r\n                            aria-label={t('Difficulty')}\r\n                            size=\"small\"\r\n                            sx={{\r\n                                justifyContent: 'flex-end',\r\n                                flexWrap: 'wrap',\r\n                                maxWidth: '210px',\r\n                            }}\r\n                        >\r\n                            {gameConfig.difficultyLevels\r\n                                .filter((option) => option.key !== DIFFICULTY_FLASHCARD)\r\n                                .map((option) => (\r\n                                    <ToggleButton key={option.key} value={option.key} disabled={option.disabled}>\r\n                                        {t(option.name)}\r\n                                    </ToggleButton>\r\n                                ))}\r\n                            {showAdvancedOptions && gameCategory.hasFlashCardDifficulty && (\r\n                                <ToggleButton\r\n                                    key={optionFlashcard.key}\r\n                                    value={optionFlashcard.key}\r\n                                    disabled={optionFlashcard.disabled}\r\n                                >\r\n                                    {t(optionFlashcard.name)}\r\n                                </ToggleButton>\r\n                            )}\r\n                        </ToggleButtonGroup>\r\n                    </OptionRow>\r\n                    {showAdvancedOptions && gameCategory.canChooseIndependant && (\r\n                        <OptionRow>\r\n                            <InputLabel htmlFor=\"Independent\">{t('Independent countries only')}:</InputLabel>\r\n                            <Switch\r\n                                id=\"Independent\"\r\n                                name=\"Independent\"\r\n                                checked={independantOnly}\r\n                                onChange={handleChangeIndependant}\r\n                                sx={{\r\n                                    mt: pxToRem(10),\r\n                                    mr: 0,\r\n                                    mb: 0,\r\n                                    ml: pxToRem(12),\r\n                                }}\r\n                            />\r\n                        </OptionRow>\r\n                    )}\r\n                    {showAdvancedOptions && gameCategory.canDisableMapBackground && (\r\n                        <OptionRow>\r\n                            <InputLabel htmlFor=\"HideBackgroundMap\">{t('Hide map background')}:</InputLabel>\r\n                            <Switch\r\n                                id=\"HideBackgroundMap\"\r\n                                name=\"HideBackgroundMap\"\r\n                                checked={hideBackgroundMap}\r\n                                onChange={handleClickHideBackgroundMap}\r\n                                sx={{\r\n                                    mt: 0,\r\n                                    mr: 0,\r\n                                    mb: 0,\r\n                                    ml: pxToRem(12),\r\n                                }}\r\n                            />\r\n                        </OptionRow>\r\n                    )}\r\n                    <Spacer height={1} />\r\n                    <MainButton\r\n                        buttonP={{\r\n                            color: 'primary',\r\n                            size: 'large',\r\n                            onClick: handleClickStart,\r\n                            mt: pxToRem(16),\r\n                        }}\r\n                    >\r\n                        {t('Start Game')}\r\n                    </MainButton>\r\n                </Stack>\r\n            </Card>\r\n        </Grow>\r\n    );\r\n};\r\n\r\nexport default NewGameOptions;\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Stack } from '@mui/material';\r\n\r\nimport NewGameCategories from 'components/menu/NewGameCategories';\r\nimport NewGameOptions from 'components/menu/NewGameOptions';\r\nimport { chooseGameCategory } from 'store/actions';\r\nimport { useGameConfig, useGameOptions } from 'store/selector';\r\n\r\nconst NewGame = (props) => {\r\n    const { cssTransition } = props;\r\n    const dispatch = useDispatch();\r\n    const gameOptions = useGameOptions();\r\n    const gameConfig = useGameConfig();\r\n\r\n    const [step, setStep] = useState(0);\r\n    const [gameCategoryKey, setGameCategoryKey] = useState(\r\n        (gameOptions && gameOptions.gameMode) || gameConfig.gameCategories[0].key\r\n    );\r\n\r\n    const handleClickGameCategory = (gameCategoryKey) => {\r\n        setGameCategoryKey(gameCategoryKey);\r\n        setStep(1);\r\n        dispatch(chooseGameCategory(gameCategoryKey));\r\n    };\r\n    const handleClickChangeGameCategory = () => {\r\n        setStep(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Stack\r\n                alignItems=\"center\"\r\n                direction=\"column\"\r\n                justifyContent=\"center\"\r\n                maxWidth=\"100%\"\r\n                height=\"100%\"\r\n                flexGrow={1}\r\n                gap={3}\r\n                sx={{\r\n                    ...cssTransition,\r\n                }}\r\n            >\r\n                {step === 0 ? (\r\n                    <NewGameCategories handleClickGameCategory={handleClickGameCategory} />\r\n                ) : step === 1 ? (\r\n                    <NewGameOptions\r\n                        gameCategoryKey={gameCategoryKey}\r\n                        handleClickChangeGameCategory={handleClickChangeGameCategory}\r\n                    />\r\n                ) : null}\r\n            </Stack>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewGame;\r\n"],"names":["PrevButton","props","children","restProps","_objectWithoutProperties","_excluded","_jsxs","IconButton","_objectSpread","className","_jsx","ArrowBackIosNewIcon","NextButton","_excluded2","ArrowForwardIosIcon","handleClickGameCategory","theme","useTheme","t","i18n","useTranslation","lastGameCategoryKey","useLastGameCategory","gameConfig","useGameConfig","language","useLanguage","emblaRef","emblaApi","useEmblaCarousel","dragFree","containScroll","useEffect","gameCategories","gameIndex","findIndex","m","key","scrollTo","prevBtnDisabled","nextBtnDisabled","onPrevButtonClick","onNextButtonClick","setPrevBtnDisabled","useState","setNextBtnDisabled","useCallback","scrollPrev","scrollNext","onSelect","canScrollPrev","canScrollNext","on","usePrevNextButtons","_Fragment","Typography","variant","display","width","fontSize","pxToRem","fontWeight","textAlign","mb","FunTypo","text","color","palette","main","replace","stroke","strokeWidth","distance","sx","lineHeight","Box","ref","maxWidth","padding","my","maskImage","touchAction","marginLeft","map","gameCat","index","isDisabled","disabledOffline","navigator","onLine","shadowAlpha","transform","flex","concat","minWidth","pl","overflowY","position","Grow","in","timeout","Button","size","disabled","flexDirection","alignItems","overflow","px","pt","pb","neutral","secondary","contrast","height","fill","filter","alpha","shadow","onClick","e","getGameSVG","name","mt","CloudOffIcon","bottom","notTranslated","semiTranslated","justifyContent","backgroundColor","top","left","span","_ref","_ref2","handleClickChangeGameCategory","gameCategoryKey","dispatch","useDispatch","gameOptions","useGameOptions","lastGameModeKey","useLastGameMode","showAdvancedOptions","useShowAdvancedOptions","gameCategory","find","g","gameMode","setGameMode","modes","mode","gameLength","setGameLength","SHORT","independantOnly","setIndependantOnly","canChooseIndependant","region","setRegion","canChooseRegion","difficultyLevel","setDifficultyLevel","DIFFICULTY_FLASHCARD","hasFlashCardDifficulty","DIFFICULTY_NORMAL","hideBackgroundMap","setHideBackgroundMap","regions","getRegions","optionFlashcard","difficultyLevels","option","Card","Stack","spacing","py","svg","mr","textShadow","Spacer","length","OptionRow","InputLabel","htmlFor","ToggleButtonGroup","id","value","exclusive","onChange","event","target","chooseGameMode","ToggleButton","TextField","required","select","SelectProps","native","Object","values","r","subregions","code","FULL","flexWrap","Switch","checked","ml","canDisableMapBackground","MainButton","buttonP","handleClickStart","startGame","cssTransition","step","setStep","setGameCategoryKey","direction","flexGrow","gap","NewGameCategories","chooseGameCategory","NewGameOptions"],"sourceRoot":""}