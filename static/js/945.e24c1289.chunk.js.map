{"version":3,"file":"static/js/945.e24c1289.chunk.js","mappings":"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","sources":["../node_modules/embla-carousel-reactive-utils/src/components/utils.ts","../node_modules/embla-carousel/src/components/utils.ts","../node_modules/embla-carousel/src/components/EventStore.ts","../node_modules/embla-carousel/src/components/Animations.ts","../node_modules/embla-carousel/src/components/Limit.ts","../node_modules/embla-carousel/src/components/Counter.ts","../node_modules/embla-carousel/src/components/DragHandler.ts","../node_modules/embla-carousel/src/components/DragTracker.ts","../node_modules/embla-carousel/src/components/ResizeHandler.ts","../node_modules/embla-carousel/src/components/ScrollBounds.ts","../node_modules/embla-carousel/src/components/ScrollLooper.ts","../node_modules/embla-carousel/src/components/ScrollTarget.ts","../node_modules/embla-carousel/src/components/SlideFocus.ts","../node_modules/embla-carousel/src/components/Vector1d.ts","../node_modules/embla-carousel/src/components/Translate.ts","../node_modules/embla-carousel/src/components/SlideLooper.ts","../node_modules/embla-carousel/src/components/SlidesHandler.ts","../node_modules/embla-carousel/src/components/SlidesInView.ts","../node_modules/embla-carousel/src/components/SlidesToScroll.ts","../node_modules/embla-carousel/src/components/Engine.ts","../node_modules/embla-carousel/src/components/NodeRects.ts","../node_modules/embla-carousel/src/components/Axis.ts","../node_modules/embla-carousel/src/components/PercentOfView.ts","../node_modules/embla-carousel/src/components/Alignment.ts","../node_modules/embla-carousel/src/components/SlideSizes.ts","../node_modules/embla-carousel/src/components/ScrollSnaps.ts","../node_modules/embla-carousel/src/components/ScrollContain.ts","../node_modules/embla-carousel/src/components/ScrollLimit.ts","../node_modules/embla-carousel/src/components/ScrollBody.ts","../node_modules/embla-carousel/src/components/ScrollTo.ts","../node_modules/embla-carousel/src/components/ScrollProgress.ts","../node_modules/embla-carousel/src/components/SlideRegistry.ts","../node_modules/embla-carousel/src/components/Options.ts","../node_modules/embla-carousel/src/components/OptionsHandler.ts","../node_modules/embla-carousel/src/components/EmblaCarousel.ts","../node_modules/embla-carousel/src/components/PluginsHandler.ts","../node_modules/embla-carousel/src/components/EventHandler.ts","../node_modules/embla-carousel-react/src/components/useEmblaCarousel.ts"],"sourcesContent":["import { EmblaPluginType } from 'embla-carousel'\n\nexport function isObject(subject: unknown): subject is Record<string, unknown> {\n  return Object.prototype.toString.call(subject) === '[object Object]'\n}\n\nexport function isRecord(\n  subject: unknown\n): subject is Record<string | number, unknown> {\n  return isObject(subject) || Array.isArray(subject)\n}\n\nexport function canUseDOM(): boolean {\n  return !!(\n    typeof window !== 'undefined' &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport function areOptionsEqual(\n  optionsA: Record<string, unknown>,\n  optionsB: Record<string, unknown>\n): boolean {\n  const optionsAKeys = Object.keys(optionsA)\n  const optionsBKeys = Object.keys(optionsB)\n\n  if (optionsAKeys.length !== optionsBKeys.length) return false\n\n  const breakpointsA = JSON.stringify(Object.keys(optionsA.breakpoints || {}))\n  const breakpointsB = JSON.stringify(Object.keys(optionsB.breakpoints || {}))\n\n  if (breakpointsA !== breakpointsB) return false\n\n  return optionsAKeys.every((key) => {\n    const valueA = optionsA[key]\n    const valueB = optionsB[key]\n    if (typeof valueA === 'function') return `${valueA}` === `${valueB}`\n    if (!isRecord(valueA) || !isRecord(valueB)) return valueA === valueB\n    return areOptionsEqual(valueA, valueB)\n  })\n}\n\nexport function sortAndMapPluginToOptions(\n  plugins: EmblaPluginType[]\n): EmblaPluginType['options'][] {\n  return plugins\n    .concat()\n    .sort((a, b) => (a.name > b.name ? 1 : -1))\n    .map((plugin) => plugin.options)\n}\n\nexport function arePluginsEqual(\n  pluginsA: EmblaPluginType[],\n  pluginsB: EmblaPluginType[]\n): boolean {\n  if (pluginsA.length !== pluginsB.length) return false\n\n  const optionsA = sortAndMapPluginToOptions(pluginsA)\n  const optionsB = sortAndMapPluginToOptions(pluginsB)\n\n  return optionsA.every((optionA, index) => {\n    const optionB = optionsB[index]\n    return areOptionsEqual(optionA, optionB)\n  })\n}\n","import { PointerEventType } from './DragTracker'\n\nexport type WindowType = Window & typeof globalThis\n\nexport function isNumber(subject: unknown): subject is number {\n  return typeof subject === 'number'\n}\n\nexport function isString(subject: unknown): subject is string {\n  return typeof subject === 'string'\n}\n\nexport function isBoolean(subject: unknown): subject is boolean {\n  return typeof subject === 'boolean'\n}\n\nexport function isObject(subject: unknown): subject is Record<string, unknown> {\n  return Object.prototype.toString.call(subject) === '[object Object]'\n}\n\nexport function mathAbs(n: number): number {\n  return Math.abs(n)\n}\n\nexport function mathSign(n: number): number {\n  return Math.sign(n)\n}\n\nexport function deltaAbs(valueB: number, valueA: number): number {\n  return mathAbs(valueB - valueA)\n}\n\nexport function factorAbs(valueB: number, valueA: number): number {\n  if (valueB === 0 || valueA === 0) return 0\n  if (mathAbs(valueB) <= mathAbs(valueA)) return 0\n  const diff = deltaAbs(mathAbs(valueB), mathAbs(valueA))\n  return mathAbs(diff / valueB)\n}\n\nexport function roundToTwoDecimals(num: number): number {\n  return Math.round(num * 100) / 100\n}\n\nexport function arrayKeys<Type>(array: Type[]): number[] {\n  return objectKeys(array).map(Number)\n}\n\nexport function arrayLast<Type>(array: Type[]): Type {\n  return array[arrayLastIndex(array)]\n}\n\nexport function arrayLastIndex<Type>(array: Type[]): number {\n  return Math.max(0, array.length - 1)\n}\n\nexport function arrayIsLastIndex<Type>(array: Type[], index: number): boolean {\n  return index === arrayLastIndex(array)\n}\n\nexport function arrayFromNumber(n: number, startAt: number = 0): number[] {\n  return Array.from(Array(n), (_, i) => startAt + i)\n}\n\nexport function objectKeys<Type extends object>(object: Type): string[] {\n  return Object.keys(object)\n}\n\nexport function objectsMergeDeep(\n  objectA: Record<string, unknown>,\n  objectB: Record<string, unknown>\n): Record<string, unknown> {\n  return [objectA, objectB].reduce((mergedObjects, currentObject) => {\n    objectKeys(currentObject).forEach((key) => {\n      const valueA = mergedObjects[key]\n      const valueB = currentObject[key]\n      const areObjects = isObject(valueA) && isObject(valueB)\n\n      mergedObjects[key] = areObjects\n        ? objectsMergeDeep(valueA, valueB)\n        : valueB\n    })\n    return mergedObjects\n  }, {})\n}\n\nexport function isMouseEvent(\n  evt: PointerEventType,\n  ownerWindow: WindowType\n): evt is MouseEvent {\n  return (\n    typeof ownerWindow.MouseEvent !== 'undefined' &&\n    evt instanceof ownerWindow.MouseEvent\n  )\n}\n","type EventNameType = keyof DocumentEventMap | keyof WindowEventMap\ntype EventHandlerType = (evt: any) => void\ntype EventOptionsType = boolean | AddEventListenerOptions | undefined\ntype EventRemoverType = () => void\n\nexport type EventStoreType = {\n  add: (\n    node: EventTarget,\n    type: EventNameType,\n    handler: EventHandlerType,\n    options?: EventOptionsType\n  ) => EventStoreType\n  clear: () => void\n}\n\nexport function EventStore(): EventStoreType {\n  let listeners: EventRemoverType[] = []\n\n  function add(\n    node: EventTarget,\n    type: EventNameType,\n    handler: EventHandlerType,\n    options: EventOptionsType = { passive: true }\n  ): EventStoreType {\n    let removeListener: EventRemoverType\n\n    if ('addEventListener' in node) {\n      node.addEventListener(type, handler, options)\n      removeListener = () => node.removeEventListener(type, handler, options)\n    } else {\n      const legacyMediaQueryList = <MediaQueryList>node\n      legacyMediaQueryList.addListener(handler)\n      removeListener = () => legacyMediaQueryList.removeListener(handler)\n    }\n\n    listeners.push(removeListener)\n    return self\n  }\n\n  function clear(): void {\n    listeners = listeners.filter((remove) => remove())\n  }\n\n  const self: EventStoreType = {\n    add,\n    clear\n  }\n  return self\n}\n","import { EngineType } from './Engine'\nimport { EventStore } from './EventStore'\nimport { WindowType } from './utils'\n\nexport type AnimationsUpdateType = (engine: EngineType) => void\nexport type AnimationsRenderType = (engine: EngineType, alpha: number) => void\n\nexport type AnimationsType = {\n  init: () => void\n  destroy: () => void\n  start: () => void\n  stop: () => void\n  update: () => void\n  render: (alpha: number) => void\n}\n\nexport function Animations(\n  ownerDocument: Document,\n  ownerWindow: WindowType,\n  update: () => void,\n  render: (alpha: number) => void\n): AnimationsType {\n  const documentVisibleHandler = EventStore()\n  const fixedTimeStep = 1000 / 60\n\n  let lastTimeStamp: number | null = null\n  let accumulatedTime = 0\n  let animationId = 0\n\n  function init(): void {\n    documentVisibleHandler.add(ownerDocument, 'visibilitychange', () => {\n      if (ownerDocument.hidden) reset()\n    })\n  }\n\n  function destroy(): void {\n    stop()\n    documentVisibleHandler.clear()\n  }\n\n  function animate(timeStamp: DOMHighResTimeStamp): void {\n    if (!animationId) return\n    if (!lastTimeStamp) {\n      lastTimeStamp = timeStamp\n      update()\n      update()\n    }\n\n    const timeElapsed = timeStamp - lastTimeStamp\n    lastTimeStamp = timeStamp\n    accumulatedTime += timeElapsed\n\n    while (accumulatedTime >= fixedTimeStep) {\n      update()\n      accumulatedTime -= fixedTimeStep\n    }\n\n    const alpha = accumulatedTime / fixedTimeStep\n    render(alpha)\n\n    if (animationId) {\n      animationId = ownerWindow.requestAnimationFrame(animate)\n    }\n  }\n\n  function start(): void {\n    if (animationId) return\n    animationId = ownerWindow.requestAnimationFrame(animate)\n  }\n\n  function stop(): void {\n    ownerWindow.cancelAnimationFrame(animationId)\n    lastTimeStamp = null\n    accumulatedTime = 0\n    animationId = 0\n  }\n\n  function reset(): void {\n    lastTimeStamp = null\n    accumulatedTime = 0\n  }\n\n  const self: AnimationsType = {\n    init,\n    destroy,\n    start,\n    stop,\n    update,\n    render\n  }\n  return self\n}\n","import { mathAbs } from './utils'\n\nexport type LimitType = {\n  min: number\n  max: number\n  length: number\n  constrain: (n: number) => number\n  reachedAny: (n: number) => boolean\n  reachedMax: (n: number) => boolean\n  reachedMin: (n: number) => boolean\n  removeOffset: (n: number) => number\n}\n\nexport function Limit(min: number = 0, max: number = 0): LimitType {\n  const length = mathAbs(min - max)\n\n  function reachedMin(n: number): boolean {\n    return n < min\n  }\n\n  function reachedMax(n: number): boolean {\n    return n > max\n  }\n\n  function reachedAny(n: number): boolean {\n    return reachedMin(n) || reachedMax(n)\n  }\n\n  function constrain(n: number): number {\n    if (!reachedAny(n)) return n\n    return reachedMin(n) ? min : max\n  }\n\n  function removeOffset(n: number): number {\n    if (!length) return n\n    return n - length * Math.ceil((n - max) / length)\n  }\n\n  const self: LimitType = {\n    length,\n    max,\n    min,\n    constrain,\n    reachedAny,\n    reachedMax,\n    reachedMin,\n    removeOffset\n  }\n  return self\n}\n","import { Limit } from './Limit'\nimport { mathAbs } from './utils'\n\nexport type CounterType = {\n  get: () => number\n  set: (n: number) => CounterType\n  add: (n: number) => CounterType\n  clone: () => CounterType\n}\n\nexport function Counter(\n  max: number,\n  start: number,\n  loop: boolean\n): CounterType {\n  const { constrain } = Limit(0, max)\n  const loopEnd = max + 1\n  let counter = withinLimit(start)\n\n  function withinLimit(n: number): number {\n    return !loop ? constrain(n) : mathAbs((loopEnd + n) % loopEnd)\n  }\n\n  function get(): number {\n    return counter\n  }\n\n  function set(n: number): CounterType {\n    counter = withinLimit(n)\n    return self\n  }\n\n  function add(n: number): CounterType {\n    return clone().set(get() + n)\n  }\n\n  function clone(): CounterType {\n    return Counter(max, get(), loop)\n  }\n\n  const self: CounterType = {\n    get,\n    set,\n    add,\n    clone\n  }\n  return self\n}\n","import { EmblaCarouselType } from './EmblaCarousel'\nimport { AnimationsType } from './Animations'\nimport { CounterType } from './Counter'\nimport { DragTrackerType, PointerEventType } from './DragTracker'\nimport { EventHandlerType } from './EventHandler'\nimport { AxisType } from './Axis'\nimport { EventStore } from './EventStore'\nimport { ScrollBodyType } from './ScrollBody'\nimport { ScrollTargetType } from './ScrollTarget'\nimport { ScrollToType } from './ScrollTo'\nimport { Vector1DType } from './Vector1d'\nimport { PercentOfViewType } from './PercentOfView'\nimport { Limit } from './Limit'\nimport {\n  deltaAbs,\n  factorAbs,\n  isBoolean,\n  isMouseEvent,\n  mathAbs,\n  mathSign,\n  WindowType\n} from './utils'\n\ntype DragHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  evt: PointerEventType\n) => boolean | void\n\nexport type DragHandlerOptionType = boolean | DragHandlerCallbackType\n\nexport type DragHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  destroy: () => void\n  pointerDown: () => boolean\n}\n\nexport function DragHandler(\n  axis: AxisType,\n  rootNode: HTMLElement,\n  ownerDocument: Document,\n  ownerWindow: WindowType,\n  target: Vector1DType,\n  dragTracker: DragTrackerType,\n  location: Vector1DType,\n  animation: AnimationsType,\n  scrollTo: ScrollToType,\n  scrollBody: ScrollBodyType,\n  scrollTarget: ScrollTargetType,\n  index: CounterType,\n  eventHandler: EventHandlerType,\n  percentOfView: PercentOfViewType,\n  dragFree: boolean,\n  dragThreshold: number,\n  skipSnaps: boolean,\n  baseFriction: number,\n  watchDrag: DragHandlerOptionType\n): DragHandlerType {\n  const { cross: crossAxis, direction } = axis\n  const focusNodes = ['INPUT', 'SELECT', 'TEXTAREA']\n  const nonPassiveEvent = { passive: false }\n  const initEvents = EventStore()\n  const dragEvents = EventStore()\n  const goToNextThreshold = Limit(50, 225).constrain(percentOfView.measure(20))\n  const snapForceBoost = { mouse: 300, touch: 400 }\n  const freeForceBoost = { mouse: 500, touch: 600 }\n  const baseSpeed = dragFree ? 43 : 25\n\n  let isMoving = false\n  let startScroll = 0\n  let startCross = 0\n  let pointerIsDown = false\n  let preventScroll = false\n  let preventClick = false\n  let isMouse = false\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchDrag) return\n\n    function downIfAllowed(evt: PointerEventType): void {\n      if (isBoolean(watchDrag) || watchDrag(emblaApi, evt)) down(evt)\n    }\n\n    const node = rootNode\n    initEvents\n      .add(node, 'dragstart', (evt) => evt.preventDefault(), nonPassiveEvent)\n      .add(node, 'touchmove', () => undefined, nonPassiveEvent)\n      .add(node, 'touchend', () => undefined)\n      .add(node, 'touchstart', downIfAllowed)\n      .add(node, 'mousedown', downIfAllowed)\n      .add(node, 'touchcancel', up)\n      .add(node, 'contextmenu', up)\n      .add(node, 'click', click, true)\n  }\n\n  function destroy(): void {\n    initEvents.clear()\n    dragEvents.clear()\n  }\n\n  function addDragEvents(): void {\n    const node = isMouse ? ownerDocument : rootNode\n    dragEvents\n      .add(node, 'touchmove', move, nonPassiveEvent)\n      .add(node, 'touchend', up)\n      .add(node, 'mousemove', move, nonPassiveEvent)\n      .add(node, 'mouseup', up)\n  }\n\n  function isFocusNode(node: Element): boolean {\n    const nodeName = node.nodeName || ''\n    return focusNodes.includes(nodeName)\n  }\n\n  function forceBoost(): number {\n    const boost = dragFree ? freeForceBoost : snapForceBoost\n    const type = isMouse ? 'mouse' : 'touch'\n    return boost[type]\n  }\n\n  function allowedForce(force: number, targetChanged: boolean): number {\n    const next = index.add(mathSign(force) * -1)\n    const baseForce = scrollTarget.byDistance(force, !dragFree).distance\n\n    if (dragFree || mathAbs(force) < goToNextThreshold) return baseForce\n    if (skipSnaps && targetChanged) return baseForce * 0.5\n\n    return scrollTarget.byIndex(next.get(), 0).distance\n  }\n\n  function down(evt: PointerEventType): void {\n    const isMouseEvt = isMouseEvent(evt, ownerWindow)\n    isMouse = isMouseEvt\n    preventClick = dragFree && isMouseEvt && !evt.buttons && isMoving\n    isMoving = deltaAbs(target.get(), location.get()) >= 2\n\n    if (isMouseEvt && evt.button !== 0) return\n    if (isFocusNode(evt.target as Element)) return\n\n    pointerIsDown = true\n    dragTracker.pointerDown(evt)\n    scrollBody.useFriction(0).useDuration(0)\n    target.set(location)\n    addDragEvents()\n    startScroll = dragTracker.readPoint(evt)\n    startCross = dragTracker.readPoint(evt, crossAxis)\n    eventHandler.emit('pointerDown')\n  }\n\n  function move(evt: PointerEventType): void {\n    const isTouchEvt = !isMouseEvent(evt, ownerWindow)\n    if (isTouchEvt && evt.touches.length >= 2) return up(evt)\n\n    const lastScroll = dragTracker.readPoint(evt)\n    const lastCross = dragTracker.readPoint(evt, crossAxis)\n    const diffScroll = deltaAbs(lastScroll, startScroll)\n    const diffCross = deltaAbs(lastCross, startCross)\n\n    if (!preventScroll && !isMouse) {\n      if (!evt.cancelable) return up(evt)\n      preventScroll = diffScroll > diffCross\n      if (!preventScroll) return up(evt)\n    }\n    const diff = dragTracker.pointerMove(evt)\n    if (diffScroll > dragThreshold) preventClick = true\n\n    scrollBody.useFriction(0.3).useDuration(0.75)\n    animation.start()\n    target.add(direction(diff))\n    evt.preventDefault()\n  }\n\n  function up(evt: PointerEventType): void {\n    const currentLocation = scrollTarget.byDistance(0, false)\n    const targetChanged = currentLocation.index !== index.get()\n    const rawForce = dragTracker.pointerUp(evt) * forceBoost()\n    const force = allowedForce(direction(rawForce), targetChanged)\n    const forceFactor = factorAbs(rawForce, force)\n    const speed = baseSpeed - 10 * forceFactor\n    const friction = baseFriction + forceFactor / 50\n\n    preventScroll = false\n    pointerIsDown = false\n    dragEvents.clear()\n    scrollBody.useDuration(speed).useFriction(friction)\n    scrollTo.distance(force, !dragFree)\n    isMouse = false\n    eventHandler.emit('pointerUp')\n  }\n\n  function click(evt: MouseEvent): void {\n    if (preventClick) {\n      evt.stopPropagation()\n      evt.preventDefault()\n      preventClick = false\n    }\n  }\n\n  function pointerDown(): boolean {\n    return pointerIsDown\n  }\n\n  const self: DragHandlerType = {\n    init,\n    destroy,\n    pointerDown\n  }\n  return self\n}\n","import { AxisOptionType, AxisType } from './Axis'\nimport { isMouseEvent, mathAbs, WindowType } from './utils'\n\ntype PointerCoordType = keyof Touch | keyof MouseEvent\nexport type PointerEventType = TouchEvent | MouseEvent\n\nexport type DragTrackerType = {\n  pointerDown: (evt: PointerEventType) => number\n  pointerMove: (evt: PointerEventType) => number\n  pointerUp: (evt: PointerEventType) => number\n  readPoint: (evt: PointerEventType, evtAxis?: AxisOptionType) => number\n}\n\nexport function DragTracker(\n  axis: AxisType,\n  ownerWindow: WindowType\n): DragTrackerType {\n  const logInterval = 170\n\n  let startEvent: PointerEventType\n  let lastEvent: PointerEventType\n\n  function readTime(evt: PointerEventType): number {\n    return evt.timeStamp\n  }\n\n  function readPoint(evt: PointerEventType, evtAxis?: AxisOptionType): number {\n    const property = evtAxis || axis.scroll\n    const coord: PointerCoordType = `client${property === 'x' ? 'X' : 'Y'}`\n    return (isMouseEvent(evt, ownerWindow) ? evt : evt.touches[0])[coord]\n  }\n\n  function pointerDown(evt: PointerEventType): number {\n    startEvent = evt\n    lastEvent = evt\n    return readPoint(evt)\n  }\n\n  function pointerMove(evt: PointerEventType): number {\n    const diff = readPoint(evt) - readPoint(lastEvent)\n    const expired = readTime(evt) - readTime(startEvent) > logInterval\n\n    lastEvent = evt\n    if (expired) startEvent = evt\n    return diff\n  }\n\n  function pointerUp(evt: PointerEventType): number {\n    if (!startEvent || !lastEvent) return 0\n    const diffDrag = readPoint(lastEvent) - readPoint(startEvent)\n    const diffTime = readTime(evt) - readTime(startEvent)\n    const expired = readTime(evt) - readTime(lastEvent) > logInterval\n    const force = diffDrag / diffTime\n    const isFlick = diffTime && !expired && mathAbs(force) > 0.1\n\n    return isFlick ? force : 0\n  }\n\n  const self: DragTrackerType = {\n    pointerDown,\n    pointerMove,\n    pointerUp,\n    readPoint\n  }\n  return self\n}\n","import { AxisType } from './Axis'\nimport { EmblaCarouselType } from './EmblaCarousel'\nimport { EventHandlerType } from './EventHandler'\nimport { NodeRectsType } from './NodeRects'\nimport { isBoolean, mathAbs, WindowType } from './utils'\n\ntype ResizeHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  entries: ResizeObserverEntry[]\n) => boolean | void\n\nexport type ResizeHandlerOptionType = boolean | ResizeHandlerCallbackType\n\nexport type ResizeHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  destroy: () => void\n}\n\nexport function ResizeHandler(\n  container: HTMLElement,\n  eventHandler: EventHandlerType,\n  ownerWindow: WindowType,\n  slides: HTMLElement[],\n  axis: AxisType,\n  watchResize: ResizeHandlerOptionType,\n  nodeRects: NodeRectsType\n): ResizeHandlerType {\n  const observeNodes = [container].concat(slides)\n  let resizeObserver: ResizeObserver\n  let containerSize: number\n  let slideSizes: number[] = []\n  let destroyed = false\n\n  function readSize(node: HTMLElement): number {\n    return axis.measureSize(nodeRects.measure(node))\n  }\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchResize) return\n\n    containerSize = readSize(container)\n    slideSizes = slides.map(readSize)\n\n    function defaultCallback(entries: ResizeObserverEntry[]): void {\n      for (const entry of entries) {\n        if (destroyed) return\n\n        const isContainer = entry.target === container\n        const slideIndex = slides.indexOf(<HTMLElement>entry.target)\n        const lastSize = isContainer ? containerSize : slideSizes[slideIndex]\n        const newSize = readSize(isContainer ? container : slides[slideIndex])\n        const diffSize = mathAbs(newSize - lastSize)\n\n        if (diffSize >= 0.5) {\n          emblaApi.reInit()\n          eventHandler.emit('resize')\n\n          break\n        }\n      }\n    }\n\n    resizeObserver = new ResizeObserver((entries) => {\n      if (isBoolean(watchResize) || watchResize(emblaApi, entries)) {\n        defaultCallback(entries)\n      }\n    })\n\n    ownerWindow.requestAnimationFrame(() => {\n      observeNodes.forEach((node) => resizeObserver.observe(node))\n    })\n  }\n\n  function destroy(): void {\n    destroyed = true\n    if (resizeObserver) resizeObserver.disconnect()\n  }\n\n  const self: ResizeHandlerType = {\n    init,\n    destroy\n  }\n  return self\n}\n","import { Limit, LimitType } from './Limit'\nimport { ScrollBodyType } from './ScrollBody'\nimport { Vector1DType } from './Vector1d'\nimport { mathAbs } from './utils'\nimport { PercentOfViewType } from './PercentOfView'\n\nexport type ScrollBoundsType = {\n  shouldConstrain: () => boolean\n  constrain: (pointerDown: boolean) => void\n  toggleActive: (active: boolean) => void\n}\n\nexport function ScrollBounds(\n  limit: LimitType,\n  location: Vector1DType,\n  target: Vector1DType,\n  scrollBody: ScrollBodyType,\n  percentOfView: PercentOfViewType\n): ScrollBoundsType {\n  const pullBackThreshold = percentOfView.measure(10)\n  const edgeOffsetTolerance = percentOfView.measure(50)\n  const frictionLimit = Limit(0.1, 0.99)\n  let disabled = false\n\n  function shouldConstrain(): boolean {\n    if (disabled) return false\n    if (!limit.reachedAny(target.get())) return false\n    if (!limit.reachedAny(location.get())) return false\n    return true\n  }\n\n  function constrain(pointerDown: boolean): void {\n    if (!shouldConstrain()) return\n    const edge = limit.reachedMin(location.get()) ? 'min' : 'max'\n    const diffToEdge = mathAbs(limit[edge] - location.get())\n    const diffToTarget = target.get() - location.get()\n    const friction = frictionLimit.constrain(diffToEdge / edgeOffsetTolerance)\n\n    target.subtract(diffToTarget * friction)\n\n    if (!pointerDown && mathAbs(diffToTarget) < pullBackThreshold) {\n      target.set(limit.constrain(target.get()))\n      scrollBody.useDuration(25).useBaseFriction()\n    }\n  }\n\n  function toggleActive(active: boolean): void {\n    disabled = !active\n  }\n\n  const self: ScrollBoundsType = {\n    shouldConstrain,\n    constrain,\n    toggleActive\n  }\n  return self\n}\n","import { Limit, LimitType } from './Limit'\nimport { Vector1DType } from './Vector1d'\n\nexport type ScrollLooperType = {\n  loop: (direction: number) => void\n}\n\nexport function ScrollLooper(\n  contentSize: number,\n  limit: LimitType,\n  location: Vector1DType,\n  vectors: Vector1DType[]\n): ScrollLooperType {\n  const jointSafety = 0.1\n  const min = limit.min + jointSafety\n  const max = limit.max + jointSafety\n  const { reachedMin, reachedMax } = Limit(min, max)\n\n  function shouldLoop(direction: number): boolean {\n    if (direction === 1) return reachedMax(location.get())\n    if (direction === -1) return reachedMin(location.get())\n    return false\n  }\n\n  function loop(direction: number): void {\n    if (!shouldLoop(direction)) return\n\n    const loopDistance = contentSize * (direction * -1)\n    vectors.forEach((v) => v.add(loopDistance))\n  }\n\n  const self: ScrollLooperType = {\n    loop\n  }\n  return self\n}\n","import { LimitType } from './Limit'\nimport { Vector1DType } from './Vector1d'\nimport { arrayLast, mathAbs, mathSign } from './utils'\n\nexport type TargetType = {\n  distance: number\n  index: number\n}\n\nexport type ScrollTargetType = {\n  byIndex: (target: number, direction: number) => TargetType\n  byDistance: (force: number, snap: boolean) => TargetType\n  shortcut: (target: number, direction: number) => number\n}\n\nexport function ScrollTarget(\n  loop: boolean,\n  scrollSnaps: number[],\n  contentSize: number,\n  limit: LimitType,\n  targetVector: Vector1DType\n): ScrollTargetType {\n  const { reachedAny, removeOffset, constrain } = limit\n\n  function minDistance(distances: number[]): number {\n    return distances.concat().sort((a, b) => mathAbs(a) - mathAbs(b))[0]\n  }\n\n  function findTargetSnap(target: number): TargetType {\n    const distance = loop ? removeOffset(target) : constrain(target)\n    const ascDiffsToSnaps = scrollSnaps\n      .map((snap, index) => ({ diff: shortcut(snap - distance, 0), index }))\n      .sort((d1, d2) => mathAbs(d1.diff) - mathAbs(d2.diff))\n\n    const { index } = ascDiffsToSnaps[0]\n    return { index, distance }\n  }\n\n  function shortcut(target: number, direction: number): number {\n    const targets = [target, target + contentSize, target - contentSize]\n\n    if (!loop) return target\n    if (!direction) return minDistance(targets)\n\n    const matchingTargets = targets.filter((t) => mathSign(t) === direction)\n    if (matchingTargets.length) return minDistance(matchingTargets)\n    return arrayLast(targets) - contentSize\n  }\n\n  function byIndex(index: number, direction: number): TargetType {\n    const diffToSnap = scrollSnaps[index] - targetVector.get()\n    const distance = shortcut(diffToSnap, direction)\n    return { index, distance }\n  }\n\n  function byDistance(distance: number, snap: boolean): TargetType {\n    const target = targetVector.get() + distance\n    const { index, distance: targetSnapDistance } = findTargetSnap(target)\n    const reachedBound = !loop && reachedAny(target)\n\n    if (!snap || reachedBound) return { index, distance }\n\n    const diffToSnap = scrollSnaps[index] - targetSnapDistance\n    const snapDistance = distance + shortcut(diffToSnap, 0)\n\n    return { index, distance: snapDistance }\n  }\n\n  const self: ScrollTargetType = {\n    byDistance,\n    byIndex,\n    shortcut\n  }\n  return self\n}\n","import { EmblaCarouselType } from './EmblaCarousel'\nimport { EventHandlerType } from './EventHandler'\nimport { EventStoreType } from './EventStore'\nimport { ScrollBodyType } from './ScrollBody'\nimport { ScrollToType } from './ScrollTo'\nimport { SlideRegistryType } from './SlideRegistry'\nimport { isBoolean, isNumber } from './utils'\n\ntype FocusHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  evt: FocusEvent\n) => boolean | void\n\nexport type FocusHandlerOptionType = boolean | FocusHandlerCallbackType\n\nexport type SlideFocusType = {\n  init: (emblaApi: EmblaCarouselType) => void\n}\n\nexport function SlideFocus(\n  root: HTMLElement,\n  slides: HTMLElement[],\n  slideRegistry: SlideRegistryType['slideRegistry'],\n  scrollTo: ScrollToType,\n  scrollBody: ScrollBodyType,\n  eventStore: EventStoreType,\n  eventHandler: EventHandlerType,\n  watchFocus: FocusHandlerOptionType\n): SlideFocusType {\n  const focusListenerOptions = { passive: true, capture: true }\n  let lastTabPressTime = 0\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchFocus) return\n\n    function defaultCallback(index: number): void {\n      const nowTime = new Date().getTime()\n      const diffTime = nowTime - lastTabPressTime\n\n      if (diffTime > 10) return\n\n      eventHandler.emit('slideFocusStart')\n      root.scrollLeft = 0\n\n      const group = slideRegistry.findIndex((group) => group.includes(index))\n\n      if (!isNumber(group)) return\n\n      scrollBody.useDuration(0)\n      scrollTo.index(group, 0)\n\n      eventHandler.emit('slideFocus')\n    }\n\n    eventStore.add(document, 'keydown', registerTabPress, false)\n\n    slides.forEach((slide, slideIndex) => {\n      eventStore.add(\n        slide,\n        'focus',\n        (evt: FocusEvent) => {\n          if (isBoolean(watchFocus) || watchFocus(emblaApi, evt)) {\n            defaultCallback(slideIndex)\n          }\n        },\n        focusListenerOptions\n      )\n    })\n  }\n\n  function registerTabPress(event: KeyboardEvent): void {\n    if (event.code === 'Tab') lastTabPressTime = new Date().getTime()\n  }\n\n  const self: SlideFocusType = {\n    init\n  }\n  return self\n}\n","import { isNumber } from './utils'\n\nexport type Vector1DType = {\n  get: () => number\n  set: (n: Vector1DType | number) => void\n  add: (n: Vector1DType | number) => void\n  subtract: (n: Vector1DType | number) => void\n}\n\nexport function Vector1D(initialValue: number): Vector1DType {\n  let value = initialValue\n\n  function get(): number {\n    return value\n  }\n\n  function set(n: Vector1DType | number): void {\n    value = normalizeInput(n)\n  }\n\n  function add(n: Vector1DType | number): void {\n    value += normalizeInput(n)\n  }\n\n  function subtract(n: Vector1DType | number): void {\n    value -= normalizeInput(n)\n  }\n\n  function normalizeInput(n: Vector1DType | number): number {\n    return isNumber(n) ? n : n.get()\n  }\n\n  const self: Vector1DType = {\n    get,\n    set,\n    add,\n    subtract\n  }\n  return self\n}\n","import { AxisType } from './Axis'\nimport { roundToTwoDecimals } from './utils'\n\nexport type TranslateType = {\n  clear: () => void\n  to: (target: number) => void\n  toggleActive: (active: boolean) => void\n}\n\nexport function Translate(\n  axis: AxisType,\n  container: HTMLElement\n): TranslateType {\n  const translate = axis.scroll === 'x' ? x : y\n  const containerStyle = container.style\n  let previousTarget: number | null = null\n  let disabled = false\n\n  function x(n: number): string {\n    return `translate3d(${n}px,0px,0px)`\n  }\n\n  function y(n: number): string {\n    return `translate3d(0px,${n}px,0px)`\n  }\n\n  function to(target: number): void {\n    if (disabled) return\n\n    const newTarget = roundToTwoDecimals(axis.direction(target))\n    if (newTarget === previousTarget) return\n\n    containerStyle.transform = translate(newTarget)\n    previousTarget = newTarget\n  }\n\n  function toggleActive(active: boolean): void {\n    disabled = !active\n  }\n\n  function clear(): void {\n    if (disabled) return\n    containerStyle.transform = ''\n    if (!container.getAttribute('style')) container.removeAttribute('style')\n  }\n\n  const self: TranslateType = {\n    clear,\n    to,\n    toggleActive\n  }\n  return self\n}\n","import { AxisType } from './Axis'\nimport { arrayKeys } from './utils'\nimport { Vector1D, Vector1DType } from './Vector1d'\nimport { Translate, TranslateType } from './Translate'\n\ntype SlideBoundType = {\n  start: number\n  end: number\n}\n\ntype LoopPointType = {\n  loopPoint: number\n  index: number\n  translate: TranslateType\n  slideLocation: Vector1DType\n  target: () => number\n}\n\nexport type SlideLooperType = {\n  canLoop: () => boolean\n  clear: () => void\n  loop: () => void\n  loopPoints: LoopPointType[]\n}\n\nexport function SlideLooper(\n  axis: AxisType,\n  viewSize: number,\n  contentSize: number,\n  slideSizes: number[],\n  slideSizesWithGaps: number[],\n  snaps: number[],\n  scrollSnaps: number[],\n  location: Vector1DType,\n  slides: HTMLElement[]\n): SlideLooperType {\n  const roundingSafety = 0.5\n  const ascItems = arrayKeys(slideSizesWithGaps)\n  const descItems = arrayKeys(slideSizesWithGaps).reverse()\n  const loopPoints = startPoints().concat(endPoints())\n\n  function removeSlideSizes(indexes: number[], from: number): number {\n    return indexes.reduce((a: number, i) => {\n      return a - slideSizesWithGaps[i]\n    }, from)\n  }\n\n  function slidesInGap(indexes: number[], gap: number): number[] {\n    return indexes.reduce((a: number[], i) => {\n      const remainingGap = removeSlideSizes(a, gap)\n      return remainingGap > 0 ? a.concat([i]) : a\n    }, [])\n  }\n\n  function findSlideBounds(offset: number): SlideBoundType[] {\n    return snaps.map((snap, index) => ({\n      start: snap - slideSizes[index] + roundingSafety + offset,\n      end: snap + viewSize - roundingSafety + offset\n    }))\n  }\n\n  function findLoopPoints(\n    indexes: number[],\n    offset: number,\n    isEndEdge: boolean\n  ): LoopPointType[] {\n    const slideBounds = findSlideBounds(offset)\n\n    return indexes.map((index) => {\n      const initial = isEndEdge ? 0 : -contentSize\n      const altered = isEndEdge ? contentSize : 0\n      const boundEdge = isEndEdge ? 'end' : 'start'\n      const loopPoint = slideBounds[index][boundEdge]\n\n      return {\n        index,\n        loopPoint,\n        slideLocation: Vector1D(-1),\n        translate: Translate(axis, slides[index]),\n        target: () => (location.get() > loopPoint ? initial : altered)\n      }\n    })\n  }\n\n  function startPoints(): LoopPointType[] {\n    const gap = scrollSnaps[0]\n    const indexes = slidesInGap(descItems, gap)\n    return findLoopPoints(indexes, contentSize, false)\n  }\n\n  function endPoints(): LoopPointType[] {\n    const gap = viewSize - scrollSnaps[0] - 1\n    const indexes = slidesInGap(ascItems, gap)\n    return findLoopPoints(indexes, -contentSize, true)\n  }\n\n  function canLoop(): boolean {\n    return loopPoints.every(({ index }) => {\n      const otherIndexes = ascItems.filter((i) => i !== index)\n      return removeSlideSizes(otherIndexes, viewSize) <= 0.1\n    })\n  }\n\n  function loop(): void {\n    loopPoints.forEach((loopPoint) => {\n      const { target, translate, slideLocation } = loopPoint\n      const shiftLocation = target()\n      if (shiftLocation === slideLocation.get()) return\n      translate.to(shiftLocation)\n      slideLocation.set(shiftLocation)\n    })\n  }\n\n  function clear(): void {\n    loopPoints.forEach((loopPoint) => loopPoint.translate.clear())\n  }\n\n  const self: SlideLooperType = {\n    canLoop,\n    clear,\n    loop,\n    loopPoints\n  }\n  return self\n}\n","import { EmblaCarouselType } from './EmblaCarousel'\nimport { EventHandlerType } from './EventHandler'\nimport { isBoolean } from './utils'\n\ntype SlidesHandlerCallbackType = (\n  emblaApi: EmblaCarouselType,\n  mutations: MutationRecord[]\n) => boolean | void\n\nexport type SlidesHandlerOptionType = boolean | SlidesHandlerCallbackType\n\nexport type SlidesHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  destroy: () => void\n}\n\nexport function SlidesHandler(\n  container: HTMLElement,\n  eventHandler: EventHandlerType,\n  watchSlides: SlidesHandlerOptionType\n): SlidesHandlerType {\n  let mutationObserver: MutationObserver\n  let destroyed = false\n\n  function init(emblaApi: EmblaCarouselType): void {\n    if (!watchSlides) return\n\n    function defaultCallback(mutations: MutationRecord[]): void {\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList') {\n          emblaApi.reInit()\n          eventHandler.emit('slidesChanged')\n          break\n        }\n      }\n    }\n\n    mutationObserver = new MutationObserver((mutations) => {\n      if (destroyed) return\n      if (isBoolean(watchSlides) || watchSlides(emblaApi, mutations)) {\n        defaultCallback(mutations)\n      }\n    })\n\n    mutationObserver.observe(container, { childList: true })\n  }\n\n  function destroy(): void {\n    if (mutationObserver) mutationObserver.disconnect()\n    destroyed = true\n  }\n\n  const self: SlidesHandlerType = {\n    init,\n    destroy\n  }\n  return self\n}\n","import { EventHandlerType } from './EventHandler'\nimport { objectKeys } from './utils'\n\ntype IntersectionEntryMapType = {\n  [key: number]: IntersectionObserverEntry\n}\n\nexport type SlidesInViewOptionsType = IntersectionObserverInit['threshold']\n\nexport type SlidesInViewType = {\n  init: () => void\n  destroy: () => void\n  get: (inView?: boolean) => number[]\n}\n\nexport function SlidesInView(\n  container: HTMLElement,\n  slides: HTMLElement[],\n  eventHandler: EventHandlerType,\n  threshold: SlidesInViewOptionsType\n): SlidesInViewType {\n  const intersectionEntryMap: IntersectionEntryMapType = {}\n  let inViewCache: number[] | null = null\n  let notInViewCache: number[] | null = null\n  let intersectionObserver: IntersectionObserver\n  let destroyed = false\n\n  function init(): void {\n    intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        if (destroyed) return\n\n        entries.forEach((entry) => {\n          const index = slides.indexOf(<HTMLElement>entry.target)\n          intersectionEntryMap[index] = entry\n        })\n\n        inViewCache = null\n        notInViewCache = null\n        eventHandler.emit('slidesInView')\n      },\n      {\n        root: container.parentElement,\n        threshold\n      }\n    )\n\n    slides.forEach((slide) => intersectionObserver.observe(slide))\n  }\n\n  function destroy(): void {\n    if (intersectionObserver) intersectionObserver.disconnect()\n    destroyed = true\n  }\n\n  function createInViewList(inView: boolean): number[] {\n    return objectKeys(intersectionEntryMap).reduce(\n      (list: number[], slideIndex) => {\n        const index = parseInt(slideIndex)\n        const { isIntersecting } = intersectionEntryMap[index]\n        const inViewMatch = inView && isIntersecting\n        const notInViewMatch = !inView && !isIntersecting\n\n        if (inViewMatch || notInViewMatch) list.push(index)\n        return list\n      },\n      []\n    )\n  }\n\n  function get(inView: boolean = true): number[] {\n    if (inView && inViewCache) return inViewCache\n    if (!inView && notInViewCache) return notInViewCache\n\n    const slideIndexes = createInViewList(inView)\n\n    if (inView) inViewCache = slideIndexes\n    if (!inView) notInViewCache = slideIndexes\n\n    return slideIndexes\n  }\n\n  const self: SlidesInViewType = {\n    init,\n    destroy,\n    get\n  }\n\n  return self\n}\n","import { AxisType } from './Axis'\nimport { NodeRectType } from './NodeRects'\nimport {\n  arrayKeys,\n  arrayLast,\n  arrayLastIndex,\n  isNumber,\n  mathAbs\n} from './utils'\n\nexport type SlidesToScrollOptionType = 'auto' | number\n\nexport type SlidesToScrollType = {\n  groupSlides: <Type>(array: Type[]) => Type[][]\n}\n\nexport function SlidesToScroll(\n  axis: AxisType,\n  viewSize: number,\n  slidesToScroll: SlidesToScrollOptionType,\n  loop: boolean,\n  containerRect: NodeRectType,\n  slideRects: NodeRectType[],\n  startGap: number,\n  endGap: number,\n  pixelTolerance: number\n): SlidesToScrollType {\n  const { startEdge, endEdge, direction } = axis\n  const groupByNumber = isNumber(slidesToScroll)\n\n  function byNumber<Type>(array: Type[], groupSize: number): Type[][] {\n    return arrayKeys(array)\n      .filter((i) => i % groupSize === 0)\n      .map((i) => array.slice(i, i + groupSize))\n  }\n\n  function bySize<Type>(array: Type[]): Type[][] {\n    if (!array.length) return []\n\n    return arrayKeys(array)\n      .reduce((groups: number[], rectB, index) => {\n        const rectA = arrayLast(groups) || 0\n        const isFirst = rectA === 0\n        const isLast = rectB === arrayLastIndex(array)\n\n        const edgeA = containerRect[startEdge] - slideRects[rectA][startEdge]\n        const edgeB = containerRect[startEdge] - slideRects[rectB][endEdge]\n        const gapA = !loop && isFirst ? direction(startGap) : 0\n        const gapB = !loop && isLast ? direction(endGap) : 0\n        const chunkSize = mathAbs(edgeB - gapB - (edgeA + gapA))\n\n        if (index && chunkSize > viewSize + pixelTolerance) groups.push(rectB)\n        if (isLast) groups.push(array.length)\n        return groups\n      }, [])\n      .map((currentSize, index, groups) => {\n        const previousSize = Math.max(groups[index - 1] || 0)\n        return array.slice(previousSize, currentSize)\n      })\n  }\n\n  function groupSlides<Type>(array: Type[]): Type[][] {\n    return groupByNumber ? byNumber(array, slidesToScroll) : bySize(array)\n  }\n\n  const self: SlidesToScrollType = {\n    groupSlides\n  }\n  return self\n}\n","import { Alignment } from './Alignment'\nimport {\n  Animations,\n  AnimationsType,\n  AnimationsUpdateType,\n  AnimationsRenderType\n} from './Animations'\nimport { Axis, AxisType } from './Axis'\nimport { Counter, CounterType } from './Counter'\nimport { DragHandler, DragHandlerType } from './DragHandler'\nimport { DragTracker } from './DragTracker'\nimport { EventHandlerType } from './EventHandler'\nimport { EventStore, EventStoreType } from './EventStore'\nimport { LimitType } from './Limit'\nimport { NodeRectType, NodeRects } from './NodeRects'\nimport { OptionsType } from './Options'\nimport { PercentOfView, PercentOfViewType } from './PercentOfView'\nimport { ResizeHandler, ResizeHandlerType } from './ResizeHandler'\nimport { ScrollBody, ScrollBodyType } from './ScrollBody'\nimport { ScrollBounds, ScrollBoundsType } from './ScrollBounds'\nimport { ScrollContain } from './ScrollContain'\nimport { ScrollLimit } from './ScrollLimit'\nimport { ScrollLooper, ScrollLooperType } from './ScrollLooper'\nimport { ScrollProgress, ScrollProgressType } from './ScrollProgress'\nimport { ScrollSnaps } from './ScrollSnaps'\nimport { SlideRegistry, SlideRegistryType } from './SlideRegistry'\nimport { ScrollTarget, ScrollTargetType } from './ScrollTarget'\nimport { ScrollTo, ScrollToType } from './ScrollTo'\nimport { SlideFocus, SlideFocusType } from './SlideFocus'\nimport { SlideLooper, SlideLooperType } from './SlideLooper'\nimport { SlidesHandler, SlidesHandlerType } from './SlidesHandler'\nimport { SlidesInView, SlidesInViewType } from './SlidesInView'\nimport { SlideSizes } from './SlideSizes'\nimport { SlidesToScroll, SlidesToScrollType } from './SlidesToScroll'\nimport { Translate, TranslateType } from './Translate'\nimport { arrayKeys, arrayLast, arrayLastIndex, WindowType } from './utils'\nimport { Vector1D, Vector1DType } from './Vector1d'\n\nexport type EngineType = {\n  ownerDocument: Document\n  ownerWindow: WindowType\n  eventHandler: EventHandlerType\n  axis: AxisType\n  animation: AnimationsType\n  scrollBounds: ScrollBoundsType\n  scrollLooper: ScrollLooperType\n  scrollProgress: ScrollProgressType\n  index: CounterType\n  indexPrevious: CounterType\n  limit: LimitType\n  location: Vector1DType\n  offsetLocation: Vector1DType\n  previousLocation: Vector1DType\n  options: OptionsType\n  percentOfView: PercentOfViewType\n  scrollBody: ScrollBodyType\n  dragHandler: DragHandlerType\n  eventStore: EventStoreType\n  slideLooper: SlideLooperType\n  slidesInView: SlidesInViewType\n  slidesToScroll: SlidesToScrollType\n  target: Vector1DType\n  translate: TranslateType\n  resizeHandler: ResizeHandlerType\n  slidesHandler: SlidesHandlerType\n  scrollTo: ScrollToType\n  scrollTarget: ScrollTargetType\n  scrollSnapList: number[]\n  scrollSnaps: number[]\n  slideIndexes: number[]\n  slideFocus: SlideFocusType\n  slideRegistry: SlideRegistryType['slideRegistry']\n  containerRect: NodeRectType\n  slideRects: NodeRectType[]\n}\n\nexport function Engine(\n  root: HTMLElement,\n  container: HTMLElement,\n  slides: HTMLElement[],\n  ownerDocument: Document,\n  ownerWindow: WindowType,\n  options: OptionsType,\n  eventHandler: EventHandlerType\n): EngineType {\n  // Options\n  const {\n    align,\n    axis: scrollAxis,\n    direction,\n    startIndex,\n    loop,\n    duration,\n    dragFree,\n    dragThreshold,\n    inViewThreshold,\n    slidesToScroll: groupSlides,\n    skipSnaps,\n    containScroll,\n    watchResize,\n    watchSlides,\n    watchDrag,\n    watchFocus\n  } = options\n\n  // Measurements\n  const pixelTolerance = 2\n  const nodeRects = NodeRects()\n  const containerRect = nodeRects.measure(container)\n  const slideRects = slides.map(nodeRects.measure)\n  const axis = Axis(scrollAxis, direction)\n  const viewSize = axis.measureSize(containerRect)\n  const percentOfView = PercentOfView(viewSize)\n  const alignment = Alignment(align, viewSize)\n  const containSnaps = !loop && !!containScroll\n  const readEdgeGap = loop || !!containScroll\n  const { slideSizes, slideSizesWithGaps, startGap, endGap } = SlideSizes(\n    axis,\n    containerRect,\n    slideRects,\n    slides,\n    readEdgeGap,\n    ownerWindow\n  )\n  const slidesToScroll = SlidesToScroll(\n    axis,\n    viewSize,\n    groupSlides,\n    loop,\n    containerRect,\n    slideRects,\n    startGap,\n    endGap,\n    pixelTolerance\n  )\n  const { snaps, snapsAligned } = ScrollSnaps(\n    axis,\n    alignment,\n    containerRect,\n    slideRects,\n    slidesToScroll\n  )\n  const contentSize = -arrayLast(snaps) + arrayLast(slideSizesWithGaps)\n  const { snapsContained, scrollContainLimit } = ScrollContain(\n    viewSize,\n    contentSize,\n    snapsAligned,\n    containScroll,\n    pixelTolerance\n  )\n  const scrollSnaps = containSnaps ? snapsContained : snapsAligned\n  const { limit } = ScrollLimit(contentSize, scrollSnaps, loop)\n\n  // Indexes\n  const index = Counter(arrayLastIndex(scrollSnaps), startIndex, loop)\n  const indexPrevious = index.clone()\n  const slideIndexes = arrayKeys(slides)\n\n  // Animation\n  const update: AnimationsUpdateType = ({\n    dragHandler,\n    scrollBody,\n    scrollBounds,\n    options: { loop }\n  }) => {\n    if (!loop) scrollBounds.constrain(dragHandler.pointerDown())\n    scrollBody.seek()\n  }\n\n  const render: AnimationsRenderType = (\n    {\n      scrollBody,\n      translate,\n      location,\n      offsetLocation,\n      previousLocation,\n      scrollLooper,\n      slideLooper,\n      dragHandler,\n      animation,\n      eventHandler,\n      scrollBounds,\n      options: { loop }\n    },\n    alpha\n  ) => {\n    const shouldSettle = scrollBody.settled()\n    const withinBounds = !scrollBounds.shouldConstrain()\n    const hasSettled = loop ? shouldSettle : shouldSettle && withinBounds\n\n    if (hasSettled && !dragHandler.pointerDown()) {\n      animation.stop()\n      eventHandler.emit('settle')\n    }\n    if (!hasSettled) eventHandler.emit('scroll')\n\n    const interpolatedLocation =\n      location.get() * alpha + previousLocation.get() * (1 - alpha)\n\n    offsetLocation.set(interpolatedLocation)\n\n    if (loop) {\n      scrollLooper.loop(scrollBody.direction())\n      slideLooper.loop()\n    }\n\n    translate.to(offsetLocation.get())\n  }\n\n  const animation = Animations(\n    ownerDocument,\n    ownerWindow,\n    () => update(engine),\n    (alpha: number) => render(engine, alpha)\n  )\n\n  // Shared\n  const friction = 0.68\n  const startLocation = scrollSnaps[index.get()]\n  const location = Vector1D(startLocation)\n  const previousLocation = Vector1D(startLocation)\n  const offsetLocation = Vector1D(startLocation)\n  const target = Vector1D(startLocation)\n  const scrollBody = ScrollBody(\n    location,\n    offsetLocation,\n    previousLocation,\n    target,\n    duration,\n    friction\n  )\n  const scrollTarget = ScrollTarget(\n    loop,\n    scrollSnaps,\n    contentSize,\n    limit,\n    target\n  )\n  const scrollTo = ScrollTo(\n    animation,\n    index,\n    indexPrevious,\n    scrollBody,\n    scrollTarget,\n    target,\n    eventHandler\n  )\n  const scrollProgress = ScrollProgress(limit)\n  const eventStore = EventStore()\n  const slidesInView = SlidesInView(\n    container,\n    slides,\n    eventHandler,\n    inViewThreshold\n  )\n  const { slideRegistry } = SlideRegistry(\n    containSnaps,\n    containScroll,\n    scrollSnaps,\n    scrollContainLimit,\n    slidesToScroll,\n    slideIndexes\n  )\n  const slideFocus = SlideFocus(\n    root,\n    slides,\n    slideRegistry,\n    scrollTo,\n    scrollBody,\n    eventStore,\n    eventHandler,\n    watchFocus\n  )\n\n  // Engine\n  const engine: EngineType = {\n    ownerDocument,\n    ownerWindow,\n    eventHandler,\n    containerRect,\n    slideRects,\n    animation,\n    axis,\n    dragHandler: DragHandler(\n      axis,\n      root,\n      ownerDocument,\n      ownerWindow,\n      target,\n      DragTracker(axis, ownerWindow),\n      location,\n      animation,\n      scrollTo,\n      scrollBody,\n      scrollTarget,\n      index,\n      eventHandler,\n      percentOfView,\n      dragFree,\n      dragThreshold,\n      skipSnaps,\n      friction,\n      watchDrag\n    ),\n    eventStore,\n    percentOfView,\n    index,\n    indexPrevious,\n    limit,\n    location,\n    offsetLocation,\n    previousLocation,\n    options,\n    resizeHandler: ResizeHandler(\n      container,\n      eventHandler,\n      ownerWindow,\n      slides,\n      axis,\n      watchResize,\n      nodeRects\n    ),\n    scrollBody,\n    scrollBounds: ScrollBounds(\n      limit,\n      offsetLocation,\n      target,\n      scrollBody,\n      percentOfView\n    ),\n    scrollLooper: ScrollLooper(contentSize, limit, offsetLocation, [\n      location,\n      offsetLocation,\n      previousLocation,\n      target\n    ]),\n    scrollProgress,\n    scrollSnapList: scrollSnaps.map(scrollProgress.get),\n    scrollSnaps,\n    scrollTarget,\n    scrollTo,\n    slideLooper: SlideLooper(\n      axis,\n      viewSize,\n      contentSize,\n      slideSizes,\n      slideSizesWithGaps,\n      snaps,\n      scrollSnaps,\n      offsetLocation,\n      slides\n    ),\n    slideFocus,\n    slidesHandler: SlidesHandler(container, eventHandler, watchSlides),\n    slidesInView,\n    slideIndexes,\n    slideRegistry,\n    slidesToScroll,\n    target,\n    translate: Translate(axis, container)\n  }\n\n  return engine\n}\n","export type NodeRectType = {\n  top: number\n  right: number\n  bottom: number\n  left: number\n  width: number\n  height: number\n}\n\nexport type NodeRectsType = {\n  measure: (node: HTMLElement) => NodeRectType\n}\n\nexport function NodeRects(): NodeRectsType {\n  function measure(node: HTMLElement): NodeRectType {\n    const { offsetTop, offsetLeft, offsetWidth, offsetHeight } = node\n    const offset: NodeRectType = {\n      top: offsetTop,\n      right: offsetLeft + offsetWidth,\n      bottom: offsetTop + offsetHeight,\n      left: offsetLeft,\n      width: offsetWidth,\n      height: offsetHeight\n    }\n\n    return offset\n  }\n\n  const self: NodeRectsType = {\n    measure\n  }\n  return self\n}\n","import { NodeRectType } from './NodeRects'\n\nexport type AxisOptionType = 'x' | 'y'\nexport type AxisDirectionOptionType = 'ltr' | 'rtl'\ntype AxisEdgeType = 'top' | 'right' | 'bottom' | 'left'\n\nexport type AxisType = {\n  scroll: AxisOptionType\n  cross: AxisOptionType\n  startEdge: AxisEdgeType\n  endEdge: AxisEdgeType\n  measureSize: (nodeRect: NodeRectType) => number\n  direction: (n: number) => number\n}\n\nexport function Axis(\n  axis: AxisOptionType,\n  contentDirection: AxisDirectionOptionType\n): AxisType {\n  const isRightToLeft = contentDirection === 'rtl'\n  const isVertical = axis === 'y'\n  const scroll = isVertical ? 'y' : 'x'\n  const cross = isVertical ? 'x' : 'y'\n  const sign = !isVertical && isRightToLeft ? -1 : 1\n  const startEdge = getStartEdge()\n  const endEdge = getEndEdge()\n\n  function measureSize(nodeRect: NodeRectType): number {\n    const { height, width } = nodeRect\n    return isVertical ? height : width\n  }\n\n  function getStartEdge(): AxisEdgeType {\n    if (isVertical) return 'top'\n    return isRightToLeft ? 'right' : 'left'\n  }\n\n  function getEndEdge(): AxisEdgeType {\n    if (isVertical) return 'bottom'\n    return isRightToLeft ? 'left' : 'right'\n  }\n\n  function direction(n: number): number {\n    return n * sign\n  }\n\n  const self: AxisType = {\n    scroll,\n    cross,\n    startEdge,\n    endEdge,\n    measureSize,\n    direction\n  }\n  return self\n}\n","export type PercentOfViewType = {\n  measure: (n: number) => number\n}\n\nexport function PercentOfView(viewSize: number): PercentOfViewType {\n  function measure(n: number): number {\n    return viewSize * (n / 100)\n  }\n\n  const self: PercentOfViewType = {\n    measure\n  }\n  return self\n}\n","import { isString } from './utils'\n\nexport type AlignmentOptionType =\n  | 'start'\n  | 'center'\n  | 'end'\n  | ((viewSize: number, snapSize: number, index: number) => number)\n\nexport type AlignmentType = {\n  measure: (n: number, index: number) => number\n}\n\nexport function Alignment(\n  align: AlignmentOptionType,\n  viewSize: number\n): AlignmentType {\n  const predefined = { start, center, end }\n\n  function start(): number {\n    return 0\n  }\n\n  function center(n: number): number {\n    return end(n) / 2\n  }\n\n  function end(n: number): number {\n    return viewSize - n\n  }\n\n  function measure(n: number, index: number): number {\n    if (isString(align)) return predefined[align](n)\n    return align(viewSize, n, index)\n  }\n\n  const self: AlignmentType = {\n    measure\n  }\n  return self\n}\n","import { AxisType } from './Axis'\nimport { NodeRectType } from './NodeRects'\nimport { arrayIsLastIndex, arrayLast, mathAbs, WindowType } from './utils'\n\nexport type SlideSizesType = {\n  slideSizes: number[]\n  slideSizesWithGaps: number[]\n  startGap: number\n  endGap: number\n}\n\nexport function SlideSizes(\n  axis: AxisType,\n  containerRect: NodeRectType,\n  slideRects: NodeRectType[],\n  slides: HTMLElement[],\n  readEdgeGap: boolean,\n  ownerWindow: WindowType\n): SlideSizesType {\n  const { measureSize, startEdge, endEdge } = axis\n  const withEdgeGap = slideRects[0] && readEdgeGap\n  const startGap = measureStartGap()\n  const endGap = measureEndGap()\n  const slideSizes = slideRects.map(measureSize)\n  const slideSizesWithGaps = measureWithGaps()\n\n  function measureStartGap(): number {\n    if (!withEdgeGap) return 0\n    const slideRect = slideRects[0]\n    return mathAbs(containerRect[startEdge] - slideRect[startEdge])\n  }\n\n  function measureEndGap(): number {\n    if (!withEdgeGap) return 0\n    const style = ownerWindow.getComputedStyle(arrayLast(slides))\n    return parseFloat(style.getPropertyValue(`margin-${endEdge}`))\n  }\n\n  function measureWithGaps(): number[] {\n    return slideRects\n      .map((rect, index, rects) => {\n        const isFirst = !index\n        const isLast = arrayIsLastIndex(rects, index)\n        if (isFirst) return slideSizes[index] + startGap\n        if (isLast) return slideSizes[index] + endGap\n        return rects[index + 1][startEdge] - rect[startEdge]\n      })\n      .map(mathAbs)\n  }\n\n  const self: SlideSizesType = {\n    slideSizes,\n    slideSizesWithGaps,\n    startGap,\n    endGap\n  }\n  return self\n}\n","import { AlignmentType } from './Alignment'\nimport { AxisType } from './Axis'\nimport { NodeRectType } from './NodeRects'\nimport { SlidesToScrollType } from './SlidesToScroll'\nimport { arrayLast, mathAbs } from './utils'\n\nexport type ScrollSnapsType = {\n  snaps: number[]\n  snapsAligned: number[]\n}\n\nexport function ScrollSnaps(\n  axis: AxisType,\n  alignment: AlignmentType,\n  containerRect: NodeRectType,\n  slideRects: NodeRectType[],\n  slidesToScroll: SlidesToScrollType\n): ScrollSnapsType {\n  const { startEdge, endEdge } = axis\n  const { groupSlides } = slidesToScroll\n  const alignments = measureSizes().map(alignment.measure)\n  const snaps = measureUnaligned()\n  const snapsAligned = measureAligned()\n\n  function measureSizes(): number[] {\n    return groupSlides(slideRects)\n      .map((rects) => arrayLast(rects)[endEdge] - rects[0][startEdge])\n      .map(mathAbs)\n  }\n\n  function measureUnaligned(): number[] {\n    return slideRects\n      .map((rect) => containerRect[startEdge] - rect[startEdge])\n      .map((snap) => -mathAbs(snap))\n  }\n\n  function measureAligned(): number[] {\n    return groupSlides(snaps)\n      .map((g) => g[0])\n      .map((snap, index) => snap + alignments[index])\n  }\n\n  const self: ScrollSnapsType = {\n    snaps,\n    snapsAligned\n  }\n  return self\n}\n","import { Limit, LimitType } from './Limit'\nimport { arrayIsLastIndex, arrayLast, deltaAbs } from './utils'\n\nexport type ScrollContainOptionType = false | 'trimSnaps' | 'keepSnaps'\n\nexport type ScrollContainType = {\n  snapsContained: number[]\n  scrollContainLimit: LimitType\n}\n\nexport function ScrollContain(\n  viewSize: number,\n  contentSize: number,\n  snapsAligned: number[],\n  containScroll: ScrollContainOptionType,\n  pixelTolerance: number\n): ScrollContainType {\n  const scrollBounds = Limit(-contentSize + viewSize, 0)\n  const snapsBounded = measureBounded()\n  const scrollContainLimit = findScrollContainLimit()\n  const snapsContained = measureContained()\n\n  function usePixelTolerance(bound: number, snap: number): boolean {\n    return deltaAbs(bound, snap) <= 1\n  }\n\n  function findScrollContainLimit(): LimitType {\n    const startSnap = snapsBounded[0]\n    const endSnap = arrayLast(snapsBounded)\n    const min = snapsBounded.lastIndexOf(startSnap)\n    const max = snapsBounded.indexOf(endSnap) + 1\n    return Limit(min, max)\n  }\n\n  function measureBounded(): number[] {\n    return snapsAligned\n      .map((snapAligned, index) => {\n        const { min, max } = scrollBounds\n        const snap = scrollBounds.constrain(snapAligned)\n        const isFirst = !index\n        const isLast = arrayIsLastIndex(snapsAligned, index)\n        if (isFirst) return max\n        if (isLast) return min\n        if (usePixelTolerance(min, snap)) return min\n        if (usePixelTolerance(max, snap)) return max\n        return snap\n      })\n      .map((scrollBound) => parseFloat(scrollBound.toFixed(3)))\n  }\n\n  function measureContained(): number[] {\n    if (contentSize <= viewSize + pixelTolerance) return [scrollBounds.max]\n    if (containScroll === 'keepSnaps') return snapsBounded\n    const { min, max } = scrollContainLimit\n    return snapsBounded.slice(min, max)\n  }\n\n  const self: ScrollContainType = {\n    snapsContained,\n    scrollContainLimit\n  }\n  return self\n}\n","import { Limit, LimitType } from './Limit'\nimport { arrayLast } from './utils'\n\nexport type ScrollLimitType = {\n  limit: LimitType\n}\n\nexport function ScrollLimit(\n  contentSize: number,\n  scrollSnaps: number[],\n  loop: boolean\n): ScrollLimitType {\n  const max = scrollSnaps[0]\n  const min = loop ? max - contentSize : arrayLast(scrollSnaps)\n  const limit = Limit(min, max)\n\n  const self: ScrollLimitType = {\n    limit\n  }\n  return self\n}\n","import { mathSign, mathAbs } from './utils'\nimport { Vector1DType } from './Vector1d'\n\nexport type ScrollBodyType = {\n  direction: () => number\n  duration: () => number\n  velocity: () => number\n  seek: () => ScrollBodyType\n  settled: () => boolean\n  useBaseFriction: () => ScrollBodyType\n  useBaseDuration: () => ScrollBodyType\n  useFriction: (n: number) => ScrollBodyType\n  useDuration: (n: number) => ScrollBodyType\n}\n\nexport function ScrollBody(\n  location: Vector1DType,\n  offsetLocation: Vector1DType,\n  previousLocation: Vector1DType,\n  target: Vector1DType,\n  baseDuration: number,\n  baseFriction: number\n): ScrollBodyType {\n  let scrollVelocity = 0\n  let scrollDirection = 0\n  let scrollDuration = baseDuration\n  let scrollFriction = baseFriction\n  let rawLocation = location.get()\n  let rawLocationPrevious = 0\n\n  function seek(): ScrollBodyType {\n    const displacement = target.get() - location.get()\n    const isInstant = !scrollDuration\n    let scrollDistance = 0\n\n    if (isInstant) {\n      scrollVelocity = 0\n      previousLocation.set(target)\n      location.set(target)\n\n      scrollDistance = displacement\n    } else {\n      previousLocation.set(location)\n\n      scrollVelocity += displacement / scrollDuration\n      scrollVelocity *= scrollFriction\n      rawLocation += scrollVelocity\n      location.add(scrollVelocity)\n\n      scrollDistance = rawLocation - rawLocationPrevious\n    }\n\n    scrollDirection = mathSign(scrollDistance)\n    rawLocationPrevious = rawLocation\n    return self\n  }\n\n  function settled(): boolean {\n    const diff = target.get() - offsetLocation.get()\n    return mathAbs(diff) < 0.001\n  }\n\n  function duration(): number {\n    return scrollDuration\n  }\n\n  function direction(): number {\n    return scrollDirection\n  }\n\n  function velocity(): number {\n    return scrollVelocity\n  }\n\n  function useBaseDuration(): ScrollBodyType {\n    return useDuration(baseDuration)\n  }\n\n  function useBaseFriction(): ScrollBodyType {\n    return useFriction(baseFriction)\n  }\n\n  function useDuration(n: number): ScrollBodyType {\n    scrollDuration = n\n    return self\n  }\n\n  function useFriction(n: number): ScrollBodyType {\n    scrollFriction = n\n    return self\n  }\n\n  const self: ScrollBodyType = {\n    direction,\n    duration,\n    velocity,\n    seek,\n    settled,\n    useBaseFriction,\n    useBaseDuration,\n    useFriction,\n    useDuration\n  }\n  return self\n}\n","import { AnimationsType } from './Animations'\nimport { CounterType } from './Counter'\nimport { EventHandlerType } from './EventHandler'\nimport { ScrollBodyType } from './ScrollBody'\nimport { ScrollTargetType, TargetType } from './ScrollTarget'\nimport { Vector1DType } from './Vector1d'\n\nexport type ScrollToType = {\n  distance: (n: number, snap: boolean) => void\n  index: (n: number, direction: number) => void\n}\n\nexport function ScrollTo(\n  animation: AnimationsType,\n  indexCurrent: CounterType,\n  indexPrevious: CounterType,\n  scrollBody: ScrollBodyType,\n  scrollTarget: ScrollTargetType,\n  targetVector: Vector1DType,\n  eventHandler: EventHandlerType\n): ScrollToType {\n  function scrollTo(target: TargetType): void {\n    const distanceDiff = target.distance\n    const indexDiff = target.index !== indexCurrent.get()\n\n    targetVector.add(distanceDiff)\n\n    if (distanceDiff) {\n      if (scrollBody.duration()) {\n        animation.start()\n      } else {\n        animation.update()\n        animation.render(1)\n        animation.update()\n      }\n    }\n\n    if (indexDiff) {\n      indexPrevious.set(indexCurrent.get())\n      indexCurrent.set(target.index)\n      eventHandler.emit('select')\n    }\n  }\n\n  function distance(n: number, snap: boolean): void {\n    const target = scrollTarget.byDistance(n, snap)\n    scrollTo(target)\n  }\n\n  function index(n: number, direction: number): void {\n    const targetIndex = indexCurrent.clone().set(n)\n    const target = scrollTarget.byIndex(targetIndex.get(), direction)\n    scrollTo(target)\n  }\n\n  const self: ScrollToType = {\n    distance,\n    index\n  }\n  return self\n}\n","import { LimitType } from './Limit'\n\nexport type ScrollProgressType = {\n  get: (n: number) => number\n}\n\nexport function ScrollProgress(limit: LimitType): ScrollProgressType {\n  const { max, length } = limit\n\n  function get(n: number): number {\n    const currentLocation = n - max\n    return length ? currentLocation / -length : 0\n  }\n\n  const self: ScrollProgressType = {\n    get\n  }\n  return self\n}\n","import { LimitType } from './Limit'\nimport { ScrollContainOptionType } from './ScrollContain'\nimport { SlidesToScrollType } from './SlidesToScroll'\nimport {\n  arrayFromNumber,\n  arrayIsLastIndex,\n  arrayLast,\n  arrayLastIndex\n} from './utils'\n\nexport type SlideRegistryType = {\n  slideRegistry: number[][]\n}\n\nexport function SlideRegistry(\n  containSnaps: boolean,\n  containScroll: ScrollContainOptionType,\n  scrollSnaps: number[],\n  scrollContainLimit: LimitType,\n  slidesToScroll: SlidesToScrollType,\n  slideIndexes: number[]\n): SlideRegistryType {\n  const { groupSlides } = slidesToScroll\n  const { min, max } = scrollContainLimit\n  const slideRegistry = createSlideRegistry()\n\n  function createSlideRegistry(): number[][] {\n    const groupedSlideIndexes = groupSlides(slideIndexes)\n    const doNotContain = !containSnaps || containScroll === 'keepSnaps'\n\n    if (scrollSnaps.length === 1) return [slideIndexes]\n    if (doNotContain) return groupedSlideIndexes\n\n    return groupedSlideIndexes.slice(min, max).map((group, index, groups) => {\n      const isFirst = !index\n      const isLast = arrayIsLastIndex(groups, index)\n\n      if (isFirst) {\n        const range = arrayLast(groups[0]) + 1\n        return arrayFromNumber(range)\n      }\n      if (isLast) {\n        const range = arrayLastIndex(slideIndexes) - arrayLast(groups)[0] + 1\n        return arrayFromNumber(range, arrayLast(groups)[0])\n      }\n      return group\n    })\n  }\n\n  const self: SlideRegistryType = {\n    slideRegistry\n  }\n  return self\n}\n","import { AlignmentOptionType } from './Alignment'\nimport { AxisDirectionOptionType, AxisOptionType } from './Axis'\nimport { SlidesToScrollOptionType } from './SlidesToScroll'\nimport { ScrollContainOptionType } from './ScrollContain'\nimport { DragHandlerOptionType } from './DragHandler'\nimport { ResizeHandlerOptionType } from './ResizeHandler'\nimport { SlidesHandlerOptionType } from './SlidesHandler'\nimport { SlidesInViewOptionsType } from './SlidesInView'\nimport { FocusHandlerOptionType } from './SlideFocus'\n\nexport type LooseOptionsType = {\n  [key: string]: unknown\n}\n\nexport type CreateOptionsType<Type extends LooseOptionsType> = Type & {\n  active: boolean\n  breakpoints: {\n    [key: string]: Omit<Partial<CreateOptionsType<Type>>, 'breakpoints'>\n  }\n}\n\nexport type OptionsType = CreateOptionsType<{\n  align: AlignmentOptionType\n  axis: AxisOptionType\n  container: string | HTMLElement | null\n  slides: string | HTMLElement[] | NodeListOf<HTMLElement> | null\n  containScroll: ScrollContainOptionType\n  direction: AxisDirectionOptionType\n  slidesToScroll: SlidesToScrollOptionType\n  dragFree: boolean\n  dragThreshold: number\n  inViewThreshold: SlidesInViewOptionsType\n  loop: boolean\n  skipSnaps: boolean\n  duration: number\n  startIndex: number\n  watchDrag: DragHandlerOptionType\n  watchResize: ResizeHandlerOptionType\n  watchSlides: SlidesHandlerOptionType\n  watchFocus: FocusHandlerOptionType\n}>\n\nexport const defaultOptions: OptionsType = {\n  align: 'center',\n  axis: 'x',\n  container: null,\n  slides: null,\n  containScroll: 'trimSnaps',\n  direction: 'ltr',\n  slidesToScroll: 1,\n  inViewThreshold: 0,\n  breakpoints: {},\n  dragFree: false,\n  dragThreshold: 10,\n  loop: false,\n  skipSnaps: false,\n  duration: 25,\n  startIndex: 0,\n  active: true,\n  watchDrag: true,\n  watchResize: true,\n  watchSlides: true,\n  watchFocus: true\n}\n\nexport type EmblaOptionsType = Partial<OptionsType>\n","import { LooseOptionsType, CreateOptionsType } from './Options'\nimport { objectKeys, objectsMergeDeep, WindowType } from './utils'\n\ntype OptionsType = Partial<CreateOptionsType<LooseOptionsType>>\n\nexport type OptionsHandlerType = {\n  mergeOptions: <TypeA extends OptionsType, TypeB extends OptionsType>(\n    optionsA: TypeA,\n    optionsB?: TypeB\n  ) => TypeA\n  optionsAtMedia: <Type extends OptionsType>(options: Type) => Type\n  optionsMediaQueries: (optionsList: OptionsType[]) => MediaQueryList[]\n}\n\nexport function OptionsHandler(ownerWindow: WindowType): OptionsHandlerType {\n  function mergeOptions<TypeA extends OptionsType, TypeB extends OptionsType>(\n    optionsA: TypeA,\n    optionsB?: TypeB\n  ): TypeA {\n    return <TypeA>objectsMergeDeep(optionsA, optionsB || {})\n  }\n\n  function optionsAtMedia<Type extends OptionsType>(options: Type): Type {\n    const optionsAtMedia = options.breakpoints || {}\n    const matchedMediaOptions = objectKeys(optionsAtMedia)\n      .filter((media) => ownerWindow.matchMedia(media).matches)\n      .map((media) => optionsAtMedia[media])\n      .reduce((a, mediaOption) => mergeOptions(a, mediaOption), {})\n\n    return mergeOptions(options, matchedMediaOptions)\n  }\n\n  function optionsMediaQueries(optionsList: OptionsType[]): MediaQueryList[] {\n    return optionsList\n      .map((options) => objectKeys(options.breakpoints || {}))\n      .reduce((acc, mediaQueries) => acc.concat(mediaQueries), [])\n      .map(ownerWindow.matchMedia)\n  }\n\n  const self: OptionsHandlerType = {\n    mergeOptions,\n    optionsAtMedia,\n    optionsMediaQueries\n  }\n  return self\n}\n","import { Engine, EngineType } from './Engine'\nimport { EventStore } from './EventStore'\nimport { EventHandler, EventHandlerType } from './EventHandler'\nimport { defaultOptions, EmblaOptionsType, OptionsType } from './Options'\nimport { OptionsHandler } from './OptionsHandler'\nimport { PluginsHandler } from './PluginsHandler'\nimport { EmblaPluginsType, EmblaPluginType } from './Plugins'\nimport { isString, WindowType } from './utils'\n\nexport type EmblaCarouselType = {\n  canScrollNext: () => boolean\n  canScrollPrev: () => boolean\n  containerNode: () => HTMLElement\n  internalEngine: () => EngineType\n  destroy: () => void\n  off: EventHandlerType['off']\n  on: EventHandlerType['on']\n  emit: EventHandlerType['emit']\n  plugins: () => EmblaPluginsType\n  previousScrollSnap: () => number\n  reInit: (options?: EmblaOptionsType, plugins?: EmblaPluginType[]) => void\n  rootNode: () => HTMLElement\n  scrollNext: (jump?: boolean) => void\n  scrollPrev: (jump?: boolean) => void\n  scrollProgress: () => number\n  scrollSnapList: () => number[]\n  scrollTo: (index: number, jump?: boolean) => void\n  selectedScrollSnap: () => number\n  slideNodes: () => HTMLElement[]\n  slidesInView: () => number[]\n  slidesNotInView: () => number[]\n}\n\nfunction EmblaCarousel(\n  root: HTMLElement,\n  userOptions?: EmblaOptionsType,\n  userPlugins?: EmblaPluginType[]\n): EmblaCarouselType {\n  const ownerDocument = root.ownerDocument\n  const ownerWindow = <WindowType>ownerDocument.defaultView\n  const optionsHandler = OptionsHandler(ownerWindow)\n  const pluginsHandler = PluginsHandler(optionsHandler)\n  const mediaHandlers = EventStore()\n  const eventHandler = EventHandler()\n  const { mergeOptions, optionsAtMedia, optionsMediaQueries } = optionsHandler\n  const { on, off, emit } = eventHandler\n  const reInit = reActivate\n\n  let destroyed = false\n  let engine: EngineType\n  let optionsBase = mergeOptions(defaultOptions, EmblaCarousel.globalOptions)\n  let options = mergeOptions(optionsBase)\n  let pluginList: EmblaPluginType[] = []\n  let pluginApis: EmblaPluginsType\n\n  let container: HTMLElement\n  let slides: HTMLElement[]\n\n  function storeElements(): void {\n    const { container: userContainer, slides: userSlides } = options\n\n    const customContainer = isString(userContainer)\n      ? root.querySelector(userContainer)\n      : userContainer\n    container = <HTMLElement>(customContainer || root.children[0])\n\n    const customSlides = isString(userSlides)\n      ? container.querySelectorAll(userSlides)\n      : userSlides\n    slides = <HTMLElement[]>[].slice.call(customSlides || container.children)\n  }\n\n  function createEngine(options: OptionsType): EngineType {\n    const engine = Engine(\n      root,\n      container,\n      slides,\n      ownerDocument,\n      ownerWindow,\n      options,\n      eventHandler\n    )\n\n    if (options.loop && !engine.slideLooper.canLoop()) {\n      const optionsWithoutLoop = Object.assign({}, options, { loop: false })\n      return createEngine(optionsWithoutLoop)\n    }\n    return engine\n  }\n\n  function activate(\n    withOptions?: EmblaOptionsType,\n    withPlugins?: EmblaPluginType[]\n  ): void {\n    if (destroyed) return\n\n    optionsBase = mergeOptions(optionsBase, withOptions)\n    options = optionsAtMedia(optionsBase)\n    pluginList = withPlugins || pluginList\n\n    storeElements()\n\n    engine = createEngine(options)\n\n    optionsMediaQueries([\n      optionsBase,\n      ...pluginList.map(({ options }) => options)\n    ]).forEach((query) => mediaHandlers.add(query, 'change', reActivate))\n\n    if (!options.active) return\n\n    engine.translate.to(engine.location.get())\n    engine.animation.init()\n    engine.slidesInView.init()\n    engine.slideFocus.init(self)\n    engine.eventHandler.init(self)\n    engine.resizeHandler.init(self)\n    engine.slidesHandler.init(self)\n\n    if (engine.options.loop) engine.slideLooper.loop()\n    if (container.offsetParent && slides.length) engine.dragHandler.init(self)\n\n    pluginApis = pluginsHandler.init(self, pluginList)\n  }\n\n  function reActivate(\n    withOptions?: EmblaOptionsType,\n    withPlugins?: EmblaPluginType[]\n  ): void {\n    const startIndex = selectedScrollSnap()\n    deActivate()\n    activate(mergeOptions({ startIndex }, withOptions), withPlugins)\n    eventHandler.emit('reInit')\n  }\n\n  function deActivate(): void {\n    engine.dragHandler.destroy()\n    engine.eventStore.clear()\n    engine.translate.clear()\n    engine.slideLooper.clear()\n    engine.resizeHandler.destroy()\n    engine.slidesHandler.destroy()\n    engine.slidesInView.destroy()\n    engine.animation.destroy()\n    pluginsHandler.destroy()\n    mediaHandlers.clear()\n  }\n\n  function destroy(): void {\n    if (destroyed) return\n    destroyed = true\n    mediaHandlers.clear()\n    deActivate()\n    eventHandler.emit('destroy')\n    eventHandler.clear()\n  }\n\n  function scrollTo(index: number, jump?: boolean, direction?: number): void {\n    if (!options.active || destroyed) return\n    engine.scrollBody\n      .useBaseFriction()\n      .useDuration(jump === true ? 0 : options.duration)\n    engine.scrollTo.index(index, direction || 0)\n  }\n\n  function scrollNext(jump?: boolean): void {\n    const next = engine.index.add(1).get()\n    scrollTo(next, jump, -1)\n  }\n\n  function scrollPrev(jump?: boolean): void {\n    const prev = engine.index.add(-1).get()\n    scrollTo(prev, jump, 1)\n  }\n\n  function canScrollNext(): boolean {\n    const next = engine.index.add(1).get()\n    return next !== selectedScrollSnap()\n  }\n\n  function canScrollPrev(): boolean {\n    const prev = engine.index.add(-1).get()\n    return prev !== selectedScrollSnap()\n  }\n\n  function scrollSnapList(): number[] {\n    return engine.scrollSnapList\n  }\n\n  function scrollProgress(): number {\n    return engine.scrollProgress.get(engine.location.get())\n  }\n\n  function selectedScrollSnap(): number {\n    return engine.index.get()\n  }\n\n  function previousScrollSnap(): number {\n    return engine.indexPrevious.get()\n  }\n\n  function slidesInView(): number[] {\n    return engine.slidesInView.get()\n  }\n\n  function slidesNotInView(): number[] {\n    return engine.slidesInView.get(false)\n  }\n\n  function plugins(): EmblaPluginsType {\n    return pluginApis\n  }\n\n  function internalEngine(): EngineType {\n    return engine\n  }\n\n  function rootNode(): HTMLElement {\n    return root\n  }\n\n  function containerNode(): HTMLElement {\n    return container\n  }\n\n  function slideNodes(): HTMLElement[] {\n    return slides\n  }\n\n  const self: EmblaCarouselType = {\n    canScrollNext,\n    canScrollPrev,\n    containerNode,\n    internalEngine,\n    destroy,\n    off,\n    on,\n    emit,\n    plugins,\n    previousScrollSnap,\n    reInit,\n    rootNode,\n    scrollNext,\n    scrollPrev,\n    scrollProgress,\n    scrollSnapList,\n    scrollTo,\n    selectedScrollSnap,\n    slideNodes,\n    slidesInView,\n    slidesNotInView\n  }\n\n  activate(userOptions, userPlugins)\n  setTimeout(() => eventHandler.emit('init'), 0)\n  return self\n}\n\ndeclare namespace EmblaCarousel {\n  let globalOptions: EmblaOptionsType | undefined\n}\n\nEmblaCarousel.globalOptions = undefined\n\nexport default EmblaCarousel\n","import { EmblaCarouselType } from './EmblaCarousel'\nimport { OptionsHandlerType } from './OptionsHandler'\nimport { EmblaPluginsType, EmblaPluginType } from './Plugins'\n\nexport type PluginsHandlerType = {\n  init: (\n    emblaApi: EmblaCarouselType,\n    plugins: EmblaPluginType[]\n  ) => EmblaPluginsType\n  destroy: () => void\n}\n\nexport function PluginsHandler(\n  optionsHandler: OptionsHandlerType\n): PluginsHandlerType {\n  let activePlugins: EmblaPluginType[] = []\n\n  function init(\n    emblaApi: EmblaCarouselType,\n    plugins: EmblaPluginType[]\n  ): EmblaPluginsType {\n    activePlugins = plugins.filter(\n      ({ options }) => optionsHandler.optionsAtMedia(options).active !== false\n    )\n    activePlugins.forEach((plugin) => plugin.init(emblaApi, optionsHandler))\n\n    return plugins.reduce(\n      (map, plugin) => Object.assign(map, { [plugin.name]: plugin }),\n      {}\n    )\n  }\n\n  function destroy(): void {\n    activePlugins = activePlugins.filter((plugin) => plugin.destroy())\n  }\n\n  const self: PluginsHandlerType = {\n    init,\n    destroy\n  }\n  return self\n}\n","import { EmblaCarouselType } from './EmblaCarousel'\n\ntype CallbackType = (emblaApi: EmblaCarouselType, evt: EmblaEventType) => void\ntype ListenersType = Partial<{ [key in EmblaEventType]: CallbackType[] }>\n\nexport type EmblaEventType = EmblaEventListType[keyof EmblaEventListType]\n\nexport interface EmblaEventListType {\n  init: 'init'\n  pointerDown: 'pointerDown'\n  pointerUp: 'pointerUp'\n  slidesChanged: 'slidesChanged'\n  slidesInView: 'slidesInView'\n  scroll: 'scroll'\n  select: 'select'\n  settle: 'settle'\n  destroy: 'destroy'\n  reInit: 'reInit'\n  resize: 'resize'\n  slideFocusStart: 'slideFocusStart'\n  slideFocus: 'slideFocus'\n}\n\nexport type EventHandlerType = {\n  init: (emblaApi: EmblaCarouselType) => void\n  emit: (evt: EmblaEventType) => EventHandlerType\n  on: (evt: EmblaEventType, cb: CallbackType) => EventHandlerType\n  off: (evt: EmblaEventType, cb: CallbackType) => EventHandlerType\n  clear: () => void\n}\n\nexport function EventHandler(): EventHandlerType {\n  let listeners: ListenersType = {}\n  let api: EmblaCarouselType\n\n  function init(emblaApi: EmblaCarouselType): void {\n    api = emblaApi\n  }\n\n  function getListeners(evt: EmblaEventType): CallbackType[] {\n    return listeners[evt] || []\n  }\n\n  function emit(evt: EmblaEventType): EventHandlerType {\n    getListeners(evt).forEach((e) => e(api, evt))\n    return self\n  }\n\n  function on(evt: EmblaEventType, cb: CallbackType): EventHandlerType {\n    listeners[evt] = getListeners(evt).concat([cb])\n    return self\n  }\n\n  function off(evt: EmblaEventType, cb: CallbackType): EventHandlerType {\n    listeners[evt] = getListeners(evt).filter((e) => e !== cb)\n    return self\n  }\n\n  function clear(): void {\n    listeners = {}\n  }\n\n  const self: EventHandlerType = {\n    init,\n    emit,\n    off,\n    on,\n    clear\n  }\n  return self\n}\n","import { useRef, useEffect, useState, useCallback } from 'react'\nimport {\n  areOptionsEqual,\n  arePluginsEqual,\n  canUseDOM\n} from 'embla-carousel-reactive-utils'\nimport EmblaCarousel, {\n  EmblaCarouselType,\n  EmblaOptionsType,\n  EmblaPluginType\n} from 'embla-carousel'\n\nexport type EmblaViewportRefType = <ViewportElement extends HTMLElement>(\n  instance: ViewportElement | null\n) => void\n\nexport type UseEmblaCarouselType = [\n  EmblaViewportRefType,\n  EmblaCarouselType | undefined\n]\n\nfunction useEmblaCarousel(\n  options: EmblaOptionsType = {},\n  plugins: EmblaPluginType[] = []\n): UseEmblaCarouselType {\n  const storedOptions = useRef(options)\n  const storedPlugins = useRef(plugins)\n  const [emblaApi, setEmblaApi] = useState<EmblaCarouselType>()\n  const [viewport, setViewport] = useState<HTMLElement>()\n\n  const reInit = useCallback(() => {\n    if (emblaApi) emblaApi.reInit(storedOptions.current, storedPlugins.current)\n  }, [emblaApi])\n\n  useEffect(() => {\n    if (areOptionsEqual(storedOptions.current, options)) return\n    storedOptions.current = options\n    reInit()\n  }, [options, reInit])\n\n  useEffect(() => {\n    if (arePluginsEqual(storedPlugins.current, plugins)) return\n    storedPlugins.current = plugins\n    reInit()\n  }, [plugins, reInit])\n\n  useEffect(() => {\n    if (canUseDOM() && viewport) {\n      EmblaCarousel.globalOptions = useEmblaCarousel.globalOptions\n      const newEmblaApi = EmblaCarousel(\n        viewport,\n        storedOptions.current,\n        storedPlugins.current\n      )\n      setEmblaApi(newEmblaApi)\n      return () => newEmblaApi.destroy()\n    } else {\n      setEmblaApi(undefined)\n    }\n  }, [viewport, setEmblaApi])\n\n  return [<EmblaViewportRefType>setViewport, emblaApi]\n}\n\ndeclare namespace useEmblaCarousel {\n  let globalOptions: EmblaOptionsType | undefined\n}\n\nuseEmblaCarousel.globalOptions = undefined\n\nexport default useEmblaCarousel\n"],"names":["isRecord","subject","Object","prototype","toString","call","isObject","Array","isArray","areOptionsEqual","optionsA","optionsB","optionsAKeys","keys","optionsBKeys","length","JSON","stringify","breakpoints","every","key","valueA","valueB","concat","sortAndMapPluginToOptions","plugins","sort","a","b","name","map","plugin","options","isNumber","isString","isBoolean","mathAbs","n","Math","abs","mathSign","sign","deltaAbs","arrayKeys","array","objectKeys","Number","arrayLast","arrayLastIndex","max","arrayIsLastIndex","index","arrayFromNumber","startAt","arguments","undefined","from","_","i","object","objectsMergeDeep","objectA","objectB","reduce","mergedObjects","currentObject","forEach","areObjects","isMouseEvent","evt","ownerWindow","MouseEvent","EventStore","listeners","self","add","node","type","handler","removeListener","passive","addEventListener","removeEventListener","legacyMediaQueryList","addListener","push","clear","filter","remove","Animations","ownerDocument","update","render","documentVisibleHandler","fixedTimeStep","lastTimeStamp","accumulatedTime","animationId","animate","timeStamp","timeElapsed","requestAnimationFrame","stop","cancelAnimationFrame","init","hidden","destroy","start","Limit","min","reachedMin","reachedMax","reachedAny","constrain","removeOffset","ceil","Counter","loop","loopEnd","counter","withinLimit","get","clone","set","DragHandler","axis","rootNode","target","dragTracker","location","animation","scrollTo","scrollBody","scrollTarget","eventHandler","percentOfView","dragFree","dragThreshold","skipSnaps","baseFriction","watchDrag","cross","crossAxis","direction","focusNodes","nonPassiveEvent","initEvents","dragEvents","goToNextThreshold","measure","snapForceBoost","mouse","touch","freeForceBoost","baseSpeed","isMoving","startScroll","startCross","pointerIsDown","preventScroll","preventClick","isMouse","move","touches","up","lastScroll","readPoint","lastCross","diffScroll","diffCross","cancelable","diff","pointerMove","useFriction","useDuration","preventDefault","targetChanged","byDistance","rawForce","pointerUp","force","next","baseForce","distance","byIndex","allowedForce","forceFactor","factorAbs","speed","friction","emit","click","stopPropagation","emblaApi","downIfAllowed","isMouseEvt","buttons","button","nodeName","includes","isFocusNode","pointerDown","addDragEvents","down","DragTracker","startEvent","lastEvent","readTime","evtAxis","property","scroll","coord","expired","diffDrag","diffTime","ResizeHandler","container","slides","watchResize","nodeRects","observeNodes","resizeObserver","containerSize","slideSizes","destroyed","readSize","measureSize","ResizeObserver","entries","entry","isContainer","slideIndex","indexOf","lastSize","reInit","defaultCallback","observe","disconnect","ScrollBounds","limit","pullBackThreshold","edgeOffsetTolerance","frictionLimit","disabled","shouldConstrain","edge","diffToEdge","diffToTarget","subtract","useBaseFriction","toggleActive","active","ScrollLooper","contentSize","vectors","shouldLoop","loopDistance","v","ScrollTarget","scrollSnaps","targetVector","minDistance","distances","shortcut","targets","matchingTargets","t","snap","targetSnapDistance","ascDiffsToSnaps","d1","d2","findTargetSnap","reachedBound","SlideFocus","root","slideRegistry","eventStore","watchFocus","focusListenerOptions","capture","lastTabPressTime","registerTabPress","event","code","Date","getTime","document","slide","scrollLeft","group","findIndex","Vector1D","initialValue","value","normalizeInput","Translate","translate","containerStyle","style","previousTarget","transform","getAttribute","removeAttribute","to","newTarget","num","round","SlideLooper","viewSize","slideSizesWithGaps","snaps","ascItems","descItems","reverse","loopPoints","gap","findLoopPoints","slidesInGap","startPoints","endPoints","removeSlideSizes","indexes","offset","isEndEdge","slideBounds","end","findSlideBounds","initial","altered","boundEdge","loopPoint","slideLocation","canLoop","_ref","shiftLocation","SlidesHandler","watchSlides","mutationObserver","MutationObserver","mutations","mutation","childList","SlidesInView","threshold","intersectionEntryMap","intersectionObserver","inViewCache","notInViewCache","IntersectionObserver","parentElement","inView","slideIndexes","list","parseInt","isIntersecting","createInViewList","SlidesToScroll","slidesToScroll","containerRect","slideRects","startGap","endGap","pixelTolerance","startEdge","endEdge","groupByNumber","groupSlides","groupSize","slice","byNumber","groups","rectB","rectA","isFirst","isLast","edgeA","edgeB","gapA","chunkSize","currentSize","previousSize","bySize","Engine","align","scrollAxis","startIndex","duration","inViewThreshold","containScroll","offsetTop","offsetLeft","offsetWidth","offsetHeight","top","right","bottom","left","width","height","contentDirection","isRightToLeft","isVertical","nodeRect","Axis","PercentOfView","alignment","predefined","center","Alignment","containSnaps","readEdgeGap","withEdgeGap","slideRect","measureStartGap","getComputedStyle","parseFloat","getPropertyValue","measureEndGap","rect","rects","SlideSizes","snapsAligned","alignments","g","ScrollSnaps","snapsContained","scrollContainLimit","scrollBounds","snapsBounded","snapAligned","usePixelTolerance","scrollBound","toFixed","startSnap","endSnap","lastIndexOf","findScrollContainLimit","bound","measureContained","ScrollContain","ScrollLimit","indexPrevious","_ref2","dragHandler","seek","engine","alpha","_ref3","offsetLocation","previousLocation","scrollLooper","slideLooper","shouldSettle","settled","withinBounds","hasSettled","interpolatedLocation","startLocation","baseDuration","scrollVelocity","scrollDirection","scrollDuration","scrollFriction","rawLocation","rawLocationPrevious","velocity","displacement","scrollDistance","useBaseDuration","ScrollBody","indexCurrent","distanceDiff","indexDiff","targetIndex","ScrollTo","scrollProgress","ScrollProgress","slidesInView","groupedSlideIndexes","doNotContain","createSlideRegistry","SlideRegistry","slideFocus","resizeHandler","scrollSnapList","slidesHandler","defaultOptions","OptionsHandler","mergeOptions","optionsAtMedia","matchedMediaOptions","media","matchMedia","matches","mediaOption","optionsMediaQueries","optionsList","acc","mediaQueries","EmblaCarousel","userOptions","userPlugins","defaultView","optionsHandler","pluginsHandler","activePlugins","_ref4","assign","PluginsHandler","mediaHandlers","api","getListeners","e","off","cb","on","EventHandler","reActivate","pluginApis","optionsBase","globalOptions","pluginList","createEngine","activate","withOptions","withPlugins","userContainer","userSlides","customContainer","querySelector","children","customSlides","querySelectorAll","storeElements","_ref5","query","offsetParent","selectedScrollSnap","deActivate","jump","canScrollNext","canScrollPrev","containerNode","internalEngine","previousScrollSnap","scrollNext","scrollPrev","slideNodes","slidesNotInView","setTimeout","useEmblaCarousel","storedOptions","useRef","storedPlugins","setEmblaApi","useState","viewport","setViewport","useCallback","current","useEffect","pluginsA","pluginsB","optionA","arePluginsEqual","window","createElement","newEmblaApi"],"sourceRoot":""}